import ui/shop/fish/render
import ui/shop/plants/plants

import plants/allplants
import plants/plants

void draw_shop_plants_screen() {
  word row_address
  byte i
  byte j

  draw_shop_plant_tank_attr()

  for i,0,until,SHOP_ROW_COUNT {
    row_address = ppu_nametable0 + 5 * 32 + word(i) * word(32 * 12)

    ppu_ctrl = vertical_ppu_ctrl

    read_ppu_status()
    ppu_set_addr(row_address + 4)
    ppu_write_data(shop_tank[0])
    ppu_write_data(shop_tank[4])
    ppu_write_data(shop_tank[8])
    ppu_write_data(shop_tank[$10])
    ppu_write_data(shop_tank[$10])
    ppu_write_data(shop_tank[$10])
    ppu_write_data(shop_tank[$10])

    for j,0,until,SHOP_COLUMN_COUNT {
      draw_shop_plant(i, j)

      ppu_ctrl = vertical_ppu_ctrl
    }

    read_ppu_status()
    ppu_set_addr(row_address + 32 - 5)
    ppu_write_data(shop_tank[3])
    ppu_write_data(shop_tank[7])
    ppu_write_data(shop_tank[11])
    ppu_write_data(shop_tank[$11])
    ppu_write_data(shop_tank[$11])
    ppu_write_data(shop_tank[$11])
    ppu_write_data(shop_tank[$11])
  }

  ppu_ctrl = standard_ppu_ctrl

  draw_shop_shelf(2, 12)
  draw_shop_shelf(2, 24)
  draw_shop_shelving_columns(12)

  draw_text(13, 2, plant_screen_text.pointer, plant_screen_text.length, 0)
}

void draw_shop_plant(byte row, byte column) {
  PlantType type
  word address
  byte i
  byte temp
  byte count
  byte x
  byte y

  if (column == SHOP_COLUMN_COUNT - 1) {
    count = 6
  } else {
    // Fill gap between tanks
    count = 8
  }

  x = 5 + column * 8
  y = 5 + row * 12

  address = ppu_nametable0 + 32 * word(y) + word(x)

  for i,0,until,count {
    if (i & 1 == 0) {
      temp = 0
    } else {
      temp = 1
    }

    read_ppu_status()
    ppu_set_addr(address)
    ppu_write_data(shop_tank[1 + temp])
    ppu_write_data(shop_tank[5 + temp])
    ppu_write_data(shop_tank[9 + temp])
    ppu_write_data(0)
    ppu_write_data(0)
    ppu_write_data(0)
    ppu_write_data(shop_tank[17 + temp])

    address += 1
  }

  ppu_ctrl = standard_ppu_ctrl

  type = shop_plant_tanks[row * SHOP_COLUMN_COUNT + column]

  temp = plant_expected_width[type]
  draw_plant_of_type(type, large, x - plant_min_x + ((8 - temp) >> 1), true, temp, y + 6)

  draw_plant_name(type, x - 1, y + 8, 8)

  if (is_shop_item_enabled(row, column)) {
    draw_plant_price(type, x + 2, y + 9)
  } else {
    draw_text(x - 1, y + 9, plant_no_room_text.pointer, plant_no_room_text.length, 0)
  }
}

void draw_shop_plant_tank_attr() {
  byte i
  byte j

  for i,0,until,2 {
    ppu_set_addr(ppu_attrtable0 + 8 + 1 + i * 3 * 8)
    for j,0,until,6 {
      // Black top (0), tank bottom (3)
      ppu_write_data(%11110000)
    }

    ppu_set_addr(ppu_attrtable0 + 8 + 1 + 8 + i * 3 * 8)
    for j,0,until,6 {
      // Tank top (3), tank bottom (3)
      ppu_write_data(%11111111)
    }
  }
}

void render_shop_plant() {
  byte i
  byte j

  for i,0,until,SHOP_ROW_COUNT {
    for j,0,until,SHOP_COLUMN_COUNT {
      render_money_symbol(50 + j * 64, 111 + i * 12 * 8, 0)
    }
  }
}

const array(byte) plant_screen_text = [
  "Plants" ascii
]

const array(byte) plant_no_room_text = [
  "No room" ascii
]
