import math

void draw_shop_fish_screen() {
  byte i
  byte j

  read_ppu_status()
  ppu_set_addr(ppu_nametable0)

  for i,0,until,SHOP_ROW_COUNT {
    for j,0,until,SHOP_COLUMN_COUNT {
      draw_shop_fish_tank(i * 3 + j, shop_fish_tanks[i * 3 + j], 6 + j * 8, 5 + i * 12)
    }
  }

  draw_shop_fish_tank_attr()

  draw_text(14, 2, fish_screen_text.pointer, fish_screen_text.length, 0)

  draw_shop_shelving()
}

inline void draw_shop_fish_tank(byte fish_i, FishType type, byte x, byte y) {
  word address
  byte i
  byte j

  address = ppu_nametable0 + 32 * word(y) + word(x)

  for i,0,until,5 {
    ppu_set_addr(address)
    for j,0,until,4 {
      ppu_write_data(shop_tank[i * 4 + j])
    }

    address += 32
  }

  draw_fish_name(type, x - 2, y + 6, 8)

  if (shop_item_enabled[fish_i]) {
    // Any
    draw_text(x - 1, y + 8, any_price_text.pointer, any_price_text.length, 0)
    draw_fish_any_price(type, x + any_price_text.length, y + 8)

    // Bettas can only be purchased as male
    if (type != betta) {
      // Sexed
      draw_text(x - 1, y + 9, sexed_price_text.pointer, sexed_price_text.length, 0)
      draw_fish_sexed_price(type, x + sexed_price_text.length, y + 9)
    }
  } else {
    draw_text(x - 2, y + 8, plant_no_room_text.pointer, plant_no_room_text.length, 0)
  }
}

inline void draw_shop_fish_tank_attr() {
  byte i
  byte j

  for i,0,until,2 {
    ppu_set_addr(ppu_attrtable0 + 8 + 1 + i * 3 * 8)
    for j,0,until,3 {
      // Black top, black bottom left (0), tank bottom right (3)
      ppu_write_data(%11000000)
      // Black top, lack bottom right (0), tank bottom left (3)
      ppu_write_data(%00110000)
    }

    ppu_set_addr(ppu_attrtable0 + 8 + 1 + 8 + i * 3 * 8)
    for j,0,until,3 {
      // Black bottom, black top left (0), tank top right (3)
      ppu_write_data(%00001100)
      // Black bottom, lack top right (0), tank top left (3)
      ppu_write_data(%00000011)
    }
  }
}

inline void render_shop_fish() {
  byte i
  byte j

  byte x
  byte y
  byte mask
  bool direction
  mask = 0
  direction = true

  for i,0,until,SHOP_ROW_COUNT {
    for j,0,until,SHOP_COLUMN_COUNT {
      render_fish_type(shop_fish_tanks[i * 3 + j], 64 + j * 64, 58 + i * 12 * 8, 0, true)
      render_tank_light(7 * 8 + 3 + j * 8 * 8 , 6 * 8 + i * 12 * 8)

      if (shop_item_enabled[i * 3 + j]) {
        render_shop_fish_money(66 + j * 64, 103 + i * 12 * 8)
        if (shop_fish_tanks[i * 3 + j] != betta) {
          render_shop_fish_money(66 + j * 64, 111 + i * 12 * 8)
        }
      }
    }
  }
}

inline void render_tank_light(byte x, byte y) {
  oam_buffer[oam_index] = y
  oam_buffer[oam_index + 1] = $FF
  // Palette 0
  oam_buffer[oam_index + 2] = 0
  oam_buffer[oam_index + 3] = x

  oam_index += 4

  oam_buffer[oam_index] = y
  oam_buffer[oam_index + 1] = $FF
  // Palette 0, flip horizontally
  oam_buffer[oam_index + 2] = $40
  oam_buffer[oam_index + 3] = x + 2

  oam_index += 4
}

inline void render_shop_fish_money(byte x, byte y) {
  render_money_symbol(x, y, 0)
}

inline void draw_shop_shelving() {
  draw_shop_shelf(2, 10)
  draw_shop_shelf(2, 22)

  draw_shop_shelving_columns(10)
}

inline void draw_shop_shelving_columns(byte base_y) {
  draw_shelf_column(2, base_y + 1, 11, true)
  draw_shelf_column(29, base_y + 1, 11, false)

  draw_shelf_column(2, base_y + 13, 30 - (base_y + 13), true)
  draw_shelf_column(29, base_y + 13, 30 - (base_y + 13), false)

  ppu_ctrl = standard_ppu_ctrl
}

void draw_shop_shelf(byte x, byte y) {
  byte i

  read_ppu_status()
  ppu_set_addr(ppu_nametable0 + word(y) * 32 + word(x))

  ppu_write_data($13)

  for i,0,until,26 {
    ppu_write_data($14)
  }

  ppu_write_data($15)
}

void draw_shelf_column(byte x, byte y, byte height, bool is_left) {
  byte i
  byte tile

  if (is_left) {
    tile = $16
  } else {
    tile = $17
  }

  ppu_ctrl = vertical_ppu_ctrl

  read_ppu_status()
  ppu_set_addr(ppu_nametable0 + word(y) * 32 + word(x))

  for i,0,until,height {
    ppu_write_data(tile)
  }
}

const array(byte) shop_tank = [
  1, 2, 2, 3,
  4, 5, 6, 7,
  8, 9, $A, $B,
  $C, $D, $E, $F,
  $11, 0, 0, $12
]

const array(byte) fish_screen_text = [
  "Fish" ascii
]

const array(byte) any_price_text = [
  "Any" ascii
]

const array(byte) sexed_price_text = [
  "M/F" ascii
]
