import graphics

import bank
import custom_random
import entity/money

import ui/screen
import ui/shop/render
import ui/shop/fish/fish

import fish/fish

enum ShopScreen {
  fish,
  plants,
  buffs
}

enum ShopSelectionState {
  tank,
  price,
  sex
}

enum ShopPriceSelectionState {
  any,
  price_selection_sex,
  male,
  female
}

const byte SHOP_COLUMN_COUNT = 3
const byte SHOP_ROW_COUNT = 2
const byte SHOP_ITEM_COUNT = SHOP_COLUMN_COUNT * SHOP_ROW_COUNT

byte current_shop_row
byte current_shop_column
ShopScreen shop_screen
ShopSelectionState shop_state
ShopPriceSelectionState shop_price_state
array(bool) shop_item_enabled [SHOP_ITEM_COUNT]

void init_shop() {
  current_shop_row = 0
  current_shop_column = 0
  set_shop_screen(fish)
  shop_state = tank
  shop_price_state = any

  #if(music)
  famistudio_music_play(1)
  #endif

  set_screen(shop)
}

void close_shop() {
  #if(music)
  famistudio_music_play(0)
  #endif

  set_screen(aquarium)
}

void set_shop_screen(ShopScreen new_shop_screen) {
  shop_screen = new_shop_screen

  current_shop_row = 0
  current_shop_column = 0

  return [shop_screen] {
    fish @ init_fish_shop
    plants @ init_plants_shop
  }
}

inline bool shop_tick() {
  render_shop_sprites()

  return [shop_state] {
    tank @ shop_tank_selection_tick
    price @ shop_fish_price_selection_tick
    default @ bool_noop
  }
}

inline bool bool_noop() {
  return false
}

void noop() {

}

inline void render_shop_sprites() {
  if (shop_screen == fish) {
    render_shop_fish()
  } else {
    render_shop_plant()
  }

  render_money(0)
  render_shop_nav_indicators()
}

inline bool shop_tank_selection_tick() {
  bool temp
  temp = shop_tank_selection_input_tick()

  render_shop_tank_highlight()

  return temp
}

inline bool shop_tank_selection_input_tick() {
  if (input_can_be_consumed) {
    if (input_b != 0) {
      close_shop()
      return true
    } else if (input_select != 0 || input_start != 0) {
      if (shop_screen == fish) {
        set_shop_screen(plants)
      } else if (shop_screen == plants) {
        set_shop_screen(fish)
      }

      // Request screen redraw
      set_screen_forcibly(shop)

      return true
    } else if (input_a != 0) {
      if (not(shop_item_enabled[current_shop_row * SHOP_COLUMN_COUNT + current_shop_column])) {
        return false
      }

      if (shop_screen == fish) {
        // Special handling since bettas are only male
        if (shop_fish_tanks[current_shop_row * SHOP_COLUMN_COUNT + current_shop_column] == betta) {
          purchase_fish()
        } else {
          shop_state = price
          shop_price_state = any
        }
      } else if (shop_screen == plants) {
        purchase_plant()
      }

      return true
    } else if (input_dx > 0) {
      // Right
      if (current_shop_column < SHOP_COLUMN_COUNT - 1) {
        current_shop_column += 1

        return true
      } else if (current_shop_row < SHOP_ROW_COUNT - 1) {
        current_shop_row += 1
        current_shop_column = 0

        return true
      }
    } else if (input_dx < 0) {
      // Left
      if (current_shop_column > 0) {
        current_shop_column -= 1

        return true
      } else if (current_shop_row > 0) {
        current_shop_row -= 1
        current_shop_column = SHOP_COLUMN_COUNT - 1

        return true
      }
    } else if (input_dy > 0 && current_shop_row < SHOP_ROW_COUNT - 1) {
      // Bottom
      current_shop_row += 1

      return true
    } else if (input_dy < 0 && current_shop_row > 0) {
      // Top
      current_shop_row -= 1

      return true
    }
  }

  return false
}

bool is_shop_item_enabled(byte shop_row, byte shop_column) {
  return shop_item_enabled[shop_row * SHOP_COLUMN_COUNT + shop_column]
}