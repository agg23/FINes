import input
import fish/fish

import ui/shared
import ui/shop/shop
import ui/planteditor

import entity/inspect
import entity/money

const byte commandbar_item_count = 3

byte selected_command_item = 0
bool selection_is_active

void activate_feed() {
  start_plant_editing()
}

void end_feed() {
  stop_plant_editing()
}

void activate_fish_inspect() {
  // start_inspect()
  init_shop()

  deactivate_commandbar_selection()
}

void activate_spawn() {
  if (purchase(10)) {
    spawn_fish(tetra, false, $80, $20)
  }

  deactivate_commandbar_selection()
}

bool noop(byte i) {
  return false
}

const array(function.void.to.void) menuitem_actions = [activate_feed.pointer, activate_fish_inspect.pointer, activate_spawn.pointer]
// const array(function.byte.to.bool) menuitem_ticks = [plant_editor_tick.pointer, noop.pointer, noop.pointer]
// const array(function.byte.to.bool) menuitem_cleanup = [end_feed.pointer, noop.pointer, noop.pointer]

bool commandbar_tick() {
  if (not(input_can_be_consumed)) {
    return false
  }

  if (selection_is_active) {
    // TODO: Handle B back button

    // if (call(menuitem_ticks[selected_command_item], input_timer)) {
    //   return true
    // }
  } else {
    if (input_timer == 0) {
      if input_dx < 0 {
        // Left
        if selected_command_item > 0 {
          selected_command_item -= 1
        }
        return true
      } else if input_dx > 0 {
        // Right
        if selected_command_item < commandbar_item_count - 1 {
          selected_command_item += 1
        }
        return true
      }

      if input_a != 0 {
        selection_is_active = true
        call(menuitem_actions[selected_command_item])

        return true
      }
    }
  }

  return false
}

inline void deactivate_commandbar_selection() {
  selection_is_active = false
}

void render_commandbar() {
  byte x_low
  byte x_high
  byte y_low
  byte y_high
  x_low = 8 - 3 + 24 * selected_command_item
  y_low = 8 - 4
  x_high = x_low + 8 + 6
  y_high = 24 - 6

  render_cursor(x_low, x_high, y_low, y_high)
}

void draw_commandbar() {
  byte i
  read_ppu_status()
  ppu_set_addr(ppu_nametable0 + $20)
  for i,0,until,commandbar_background.length {
    ppu_write_data(commandbar_background[i])
  }
}

const array(byte) commandbar_background = [
  $4, $80, $81, $4, $82, $83, $4, $84,
  $85, $4, $4, $4, $4, $4, $4, $4,
  $4, $4, $4, $4, $4, $4, $4, $4,
  $4, $4, $4, $4, $4, $4, $4, $4,
  //
  $4, $90, $91, $4, $92, $93, $4, $94,
  $95]