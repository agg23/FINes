import input
import fish/fish

import ui/shared
import ui/shop/shop
import ui/planteditor
import ui/inspect/inspect

import entity/inspect
import entity/money

const byte commandbar_item_count = 4

byte selected_command_item = 0

void activate_feed() {

}

void activate_fish_inspect() {
  init_inspect()
}

void activate_shop() {
  init_shop()
}

void activate_spectator() {

}

const array(function.void.to.void) menuitem_actions = [activate_feed.pointer, activate_fish_inspect.pointer, activate_shop.pointer, activate_spectator.pointer]

bool commandbar_tick() {
  if (not(input_can_be_consumed)) {
    return false
  }

  if (input_timer == 0) {
    if input_dx < 0 {
      // Left
      if selected_command_item > 0 {
        selected_command_item -= 1
      }
      return true
    } else if input_dx > 0 {
      // Right
      if selected_command_item < commandbar_item_count - 1 {
        selected_command_item += 1
      }
      return true
    }

    if input_a != 0 {
      call(menuitem_actions[selected_command_item])

      return true
    }
  }

  return false
}

void render_commandbar() {
  byte x_low
  byte x_high
  byte y_low
  byte y_high
  x_low = 16 - 3 + 24 * selected_command_item
  y_low = 16 - 4
  x_high = x_low + 8 + 6
  y_high = y_low + 16 - 2

  render_cursor(x_low, x_high, y_low, y_high)
}

void draw_commandbar() {
  byte i
  read_ppu_status()
  ppu_set_addr(ppu_nametable0 + $40)
  for i,0,until,commandbar_background.length {
    ppu_write_data(commandbar_background[i])
  }

  ppu_set_addr(ppu_attrtable0)
  for i,0,until,8 {
    ppu_write_data(0)
  }
}

const array(byte) commandbar_background = [
  $4, $4, $80, $81, $4, $82, $83, $4,
  $84, $85, $4, $86, $87, $4, $4, $4,
  $4, $4, $4, $4, $4, $4, $4, $4,
  $4, $4, $4, $4, $4, $4, $4, $4,
  //
  $4, $4, $90, $91, $4, $92, $93, $4,
  $94, $95, $4, $96, $97]