import sound/sfx

import plants/plants
import plants/allplants

import fish/fish

void init_title() {
  spawn_fish(tetra, true, $C0, $66, false)
  spawn_fish(tetra, true, $65, $83, false)
  spawn_fish(tetra, true, $B2, $71, false)
  spawn_fish(tetra, true, $17, $50, false)
  spawn_fish(rasbora, true, $40, $94, false)
  spawn_fish(rasbora, true, $93, $91, false)

  #if(music)
  famistudio_music_play(0)
  #endif

  set_screen(title)
}

bool title_screen_tick() {
  render_fish()
  fish_move()

  aquarium_animation_tick()

  if (input_can_be_consumed) {
    if (input_start != 0 || input_a != 0 || input_b != 0) {
      // Reset plants and fish
      init_random_with_seed(frame)

      init_tank()
      init_plants()
      init_fish()

      init_aquarium()

      play_button_chirp()

      return true
    }
  }

  return false
}

void draw_title_screen() {
  byte i
  byte j

  read_ppu_status()
  ppu_set_addr(ppu_nametable0)
  for i,0,until,30 {
    for j,0,until,32 {
      ppu_write_data(0)
    }
  }

  // Draw top
  ppu_set_addr(ppu_nametable0)
  for i,0,until,64 {
    ppu_write_data(1)
  }

  ppu_set_addr(ppu_nametable0 + 7 * 32 + 12)
  for i,0,until,9 {
    ppu_write_data($84 + i)
  }

  ppu_set_addr(ppu_nametable0 + 8 * 32 + 11)
  for i,0,until,10 {
    ppu_write_data($8D + i)
  }

  ppu_set_addr(ppu_nametable0 + 9 * 32 + 19)
  ppu_write_data($97)
  ppu_write_data($98)

  // Manually draw plants outside of normal plant bounds to complete screen
  draw_plant_of_type(microsword, large, -4, false, 2, 0)
  draw_plant_of_type(microsword, medium, -2, false, 1, 0)

  add_plant(microsword, 2, medium, 2)
  add_plant(microsword, 4, small, 2)
  add_plant(marimo, 6, small, 2)
  add_plant(microsword, 8, large, 1)
  add_plant(microsword, 9, small, 2)
  add_plant(anubias, 11, large, 3)
  add_plant(rotala, 14, large, 1)
  add_plant(rotala, 15, small, 1)
  add_plant(microsword, 16, small, 2)

  add_plant(amazonsword, 19, medium, 3)
  add_plant(marimo, 23, small, 2)

  add_plant(sagittaria, 25, large, 3)

  draw_plants()

  // Fix attr entry for far left
  ppu_set_addr(ppu_attrtable0 + 6 * 8)
  ppu_write_data(%01010101)

  // Fix attr entry for far right
  ppu_set_addr(ppu_attrtable0 + 5 * 8 + 7)
  ppu_write_data(%01010101)
  ppu_set_addr(ppu_attrtable0 + 6 * 8 + 7)
  ppu_write_data(%01010101)

  // Bottom attr
  ppu_set_addr(ppu_attrtable0 + 7 * 8)
  for i,0,until,8 {
    ppu_write_data($FF)
  }

  // Draw bottom
  ppu_set_addr(ppu_nametable0 + 28 * 32)
  for i,0,until,64 {
    ppu_write_data($1D)
  }

  draw_text(4, 10, contest_text.pointer, contest_text.length, 0)
  draw_text(9, 11, title_build_text.pointer, title_build_text.length, 0)
  draw_text(9, 28, music_attribution_text.pointer, music_attribution_text.length, 0)

  set_bank_0()

  load_title_screen_palettes()
}

inline void load_title_screen_palettes() {
  add_buffered_write(ppu_palette_ram, false, aquarium_palette.pointer, $20, true)
  add_buffered_write(ppu_palette_ram, false, title_first_palette.pointer, 4, true)
  add_buffered_write(ppu_palette_ram + 12, false, title_last_palette.pointer, 4, true)
}

const array(byte) contest_text = [
  "NESDev Comp 2021 Edition"
]

const array(byte) title_build_text = [
  "Build 2/28/21.0"
]

const array(byte) music_attribution_text = [
  "Music by Erithe"
]