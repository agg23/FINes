import entity/health

import ui/shared
import ui/screen
import ui/components/details

import ui/inspect/render

byte stats_page
array(byte) stats_money_offset [4]

void init_stats() {
  stats_page = 0
  set_screen(stats)
}

void close_stats() {
  set_screen(aquarium)
}

bool stats_tick() {
  render_stats()

  if (input_b != 0) {
    close_stats()

    play_deactivate()

    return true
  } else if (input_dx > 0 && stats_page < 1) {
    // Right
    stats_page += 1

    set_screen_forcibly(stats)

    play_button_chirp()
    return true
  } else if (input_dx < 0 && stats_page > 0) {
    stats_page -= 1

    set_screen_forcibly(stats)

    play_button_chirp()
    return true
  }

  return false
}

void render_stats() {
  if (stats_page == 0) {
    render_progress_indicator(27 - 4, 7, ammonia_level, true)
    render_progress_indicator(27 - 4, 9, oxygen_level, false)
    render_progress_indicator(27 - 4, 11, co2_level, true)

    render_dpad_direction(216, 102, true, 3)
  } else {
    render_dpad_direction(16, 102, false, 3)
    render_stats_money()
  }
}

void render_stats_money() {
  byte i

  for i,0,until,4 {
    render_money_symbol(22 * 8 + (4 - stats_money_offset[i]) * 8 + 2, (7 + i * 2) * 8 - 1, 3)
  }
}

void draw_stats() {
  draw_details_panel(false)

  draw_text(6, 3, aquarium_statistics.pointer, aquarium_statistics.length, 0)

  draw_text(12, 5, page_text.pointer, page_text.length, 0)
  ppu_write_data(stats_page + 1 + $20)
  // Forward slash
  ppu_write_data($1F)
  ppu_write_data(2 + $20)

  return [stats_page] {
    0 @ draw_stats_page1
    1 @ draw_stats_page2
  }
}

void draw_stats_page1() {
  byte i
  byte temp
  // Health
  draw_text(5, 7, ammonia_text.pointer, ammonia_text.length, 0)
  draw_progress_indicator(27 - 4, 7)

  draw_text(5, 9, oxygen_text.pointer, oxygen_text.length, 0)
  draw_progress_indicator(27 - 4, 9)

  draw_text(5, 11, co2_text.pointer, co2_text.length, 0)
  draw_progress_indicator(27 - 4, 11)

  // General
  draw_text(5, 15, total_time_text.pointer, total_time_text.length, 0)

  array(byte) data [5]
  bcdConvert(elapsed_day + 1)
  temp = process_number_text(data.pointer, 5, false)

  draw_text(27 - temp - day_text.length, 15, day_text.pointer, day_text.length, 0)
  // Skip empty zeros
  draw_text(27 - temp, 15, pointer.byte(word(data.pointer) + 5 - temp), temp, 0)

  temp = 0
  for i,0,until,MAX_FISH_COUNT {
    if (fish_active[i]) {
      temp += 1
    }
  }

  draw_text(5, 17, total_fish_text.pointer, total_fish_text.length, 0)  
  draw_number_text(27 - 2, 17, temp, 2, false)

  temp = 0
  for i,0,until,MAX_PLANT_COUNT {
    if (plant_active[i]) {
      temp += 1
    }
  }

  draw_text(5, 19, total_plants_text.pointer, total_plants_text.length, 0)
  draw_number_text(27 - 2, 19, temp, 2, false)
}

void draw_stats_page2() {
  // Financials
  draw_text(5, 7, income_text.pointer, income_text.length, 0)
  draw_stats_financial_number(0, income_amount)

  draw_text(5, 9, expenses_text.pointer, expenses_text.length, 0)
  draw_stats_financial_number(1, expenses_amount)

  draw_text(5, 11, sales_text.pointer, sales_text.length, 0)
  draw_stats_financial_number(2, sales_amount)

  draw_text(5, 13, nice_tank_text.pointer, nice_tank_text.length, 0)
  draw_stats_financial_number(3, care_bonus_amount)
}

void draw_stats_financial_number(byte i, word amount) {
  array(byte) data[5]

  bcdConvert(amount)
  stats_money_offset[i] = process_number_text(data.pointer, 5, false)

  draw_text(27 - 5, 7 + i * 2, data.pointer, 5, 0)
}

const array(byte) page_text = [
  "Page " ascii
]

const array(byte) aquarium_statistics = [
  "Aquarium statistics" ascii
]

const array(byte) ammonia_text = [
  "Ammonia:" ascii
]

const array(byte) oxygen_text = [
  "Oxygen:" ascii
]

const array(byte) co2_text = [
  "CO2:" ascii
]

const array(byte) total_time_text = [
  "Total time:"
]

const array(byte) day_text = [
  "Day " ascii
]

const array(byte) total_fish_text = [
  "Total fish:"
]

const array(byte) total_plants_text = [
  "Total plants:"
]

const array(byte) income_text = [
  "Income:"
]

const array(byte) expenses_text = [
  "Expenses:"
]

const array(byte) sales_text = [
  "Sales:"
]

const array(byte) nice_tank_text = [
  "Daily bonus:"
]