import nes_lib

import entity/money

import ui/components/progress_indicator
import ui/inspect/inspect

import ui/inspect/fish

byte inspect_fish_details_index

void init_inspect_fish_details() {
  inspect_fish_details_index = inspect_packed_item_indexes[current_inspect_page * 5 + current_inspect_row]
}

inline bool inspect_fish_details_tick() {
  byte temp
  render_inspect_fish_item(inspect_fish_details_index, current_inspect_row, 2)
  render_inspect_fish_progress()

  if (input_can_be_consumed) {
    if (input_b != 0) {
      set_inspect_screen(inspect_fish)

      // Request screen redraw
      set_screen_forcibly(inspect)
      return true
    } else if (input_select != 0 && input_start != 0) {
      if (not(fish_alive[inspect_fish_details_index])) {
        // Dispose of fish
        delete_fish(inspect_fish_details_index)
      } else {
        // Sell fish
        // TODO: Add pricing
        earn(35, fish_sale)
        delete_fish(inspect_fish_details_index)
      }

      if (inspect_packed_length == 1) {
        // Removed last fish, return to aquarium
        set_screen(aquarium)
      } else {
        // TODO: Selling the first item twice? seems to break this
        if (current_inspect_row >= current_inspect_page_length - 1 && current_inspect_page * 5 + current_inspect_page_length == inspect_packed_length) {
          // Index is now out of range
          current_inspect_row -= 1
        }

        set_inspect_screen(inspect_fish)

        // Request screen redraw
        set_screen_forcibly(inspect)
      }

      return true
    }
  }

  return false
}

void draw_inspect_fish_details_content() {
  array(byte) data [11]
  FishType type
  byte i
  byte length

  type = fish_type[inspect_fish_details_index]

  draw_fish_name(type, 7, 3, 0)

  length = sex_text.length
  for i,0,until,sex_text.length {
    data[i] = sex_text[i]
  }

  if (fish_sex[inspect_fish_details_index]) {
    for i,0,until,male_text.length {
      data[sex_text.length + i] = male_text[i]
    }
    length += male_text.length
  } else {
    for i,0,until,female_text.length {
      data[sex_text.length + i] = female_text[i]
    }
    length += female_text.length
  }

  draw_text(17, 3, data.pointer, length, 0)

  draw_inspect_fish_data_rows()

  draw_back_button(4, 24)
  draw_inspect_fish_start_select_button(22, 25)
}

void draw_inspect_fish_data_rows() {
  byte temp
  word wtemp
  draw_text(5, 7, age_text.pointer, age_text.length, 0)

  if (fish_alive[inspect_fish_details_index]) {
    // TODO(millfork): Separated into multiple operations as Millfork was incorrectly compiling them in a single expression. Forced disable O2
    wtemp = elapsed_day
    wtemp -= fish_owned_date[inspect_fish_details_index]
    wtemp += fish_owned_age[inspect_fish_details_index]
  } else {
    wtemp = fish_death_date[inspect_fish_details_index]
    wtemp -= fish_owned_date[inspect_fish_details_index]
    wtemp += fish_owned_age[inspect_fish_details_index]
  }


  if (wtemp == 1) {
    // Remove "s"
    temp = days_age_text.length - 1
  } else {
    temp = days_age_text.length
  }

  draw_number_word_text(27 - 5 - temp, 7, wtemp, 5, false)
  draw_text_right(27, 7, days_age_text.pointer, temp)

  draw_text(5, 9, owned_for_text.pointer, owned_for_text.length, 0)
  
  wtemp = elapsed_day
  wtemp -= fish_owned_date[inspect_fish_details_index]

  if (wtemp == 1) {
    // Remove "s"
    temp = days_age_text.length - 1
  } else {
    temp = days_age_text.length
  }

  draw_number_word_text(27 - 5 - temp, 9, wtemp, 5, false)
  draw_text_right(27, 9, days_age_text.pointer, temp)

  // TODO
  draw_text(5, 11, color_text.pointer, color_text.length, 0)
  draw_text_right(27, 11, vibrant_text.pointer, vibrant_text.length)

  draw_text(5, 13, source_text.pointer, source_text.length, 0)

  if (fish_source[inspect_fish_details_index]) {
    draw_text_right(27, 13, breed_source_text.pointer, breed_source_text.length)
  } else {
    draw_text_right(27, 13, store_source_text.pointer, store_source_text.length)
  }

  // TODO
  draw_text(5, 15, status_text.pointer, status_text.length, 0)
  draw_text_right(27, 15, happy_text.pointer, happy_text.length)

  draw_text(5, 17, health_text.pointer, health_text.length, 0)

  if (fish_alive[inspect_fish_details_index]) {
    draw_progress_indicator(27 - 4, 17)
  } else {
    draw_text_right(27, 17, deceased_text.pointer, deceased_text.length)
  }

  draw_text(5, 19, hunger_text.pointer, hunger_text.length, 0)

  if (fish_alive[inspect_fish_details_index]) {
    draw_progress_indicator(27 - 4, 19)
  } else {
    draw_text_right(27, 19, deceased_text.pointer, deceased_text.length)
  }
}

void render_inspect_fish_progress() {
  if (fish_alive[inspect_fish_details_index]) {
    render_progress_indicator(27 - 4, 17, fish_health[inspect_fish_details_index], false)
    render_progress_indicator(27 - 4, 19, fish_hunger[inspect_fish_details_index], true)
  }
}

void draw_inspect_fish_start_select_button(byte x, byte y) {
  byte i
  word price
  array(byte) text_data [7]

  draw_start_select_button(x, y)

  if (not(fish_alive[inspect_fish_details_index])) {
    // Dispose of body
    draw_text(x, y - 3, dispose_text.pointer, dispose_text.length, 0)
    draw_text(x, y - 2, of_body_text.pointer, of_body_text.length, 0)
    return
  }

  for i,0,until,sell_text.length {
    text_data[i] = sell_text[i]
  }

  price = 35

  bcdConvert(price)

  if (bcdResult[1] != 0) {
    // Two digit number
    text_data[sell_text.length] = bcdResult[1] + $30
  } else {
    // Empty space
    text_data[sell_text.length] = $20
  }

  text_data[sell_text.length + 1] = bcdResult[0] + $30

  draw_text(x, y - 2, text_data.pointer, text_data.length, 0)
}


const array(byte) sex_text = [
  "Sex: " ascii
]

const array(byte) male_text = [
  "Male" ascii
]

const array(byte) female_text = [
  "Female" ascii
]

const array(byte) age_text = [
  "Age:" ascii
]

const array(byte) owned_for_text = [
  "Owned for:" ascii
]

const array(byte) source_text = [
  "Source:" ascii
]

const array(byte) store_source_text = [
  "Purchased" ascii
]

const array(byte) breed_source_text = [
  "Bred" ascii
]

const array(byte) status_text = [
  "Status:" ascii
]

const array(byte) happy_text = [
  "Happy" ascii
]

const array(byte) health_text = [
  "Health:" ascii
]

const array(byte) hunger_text = [
  "Hunger:" ascii
]

const array(byte) color_text = [
  "Coloring:" ascii
]

const array(byte) vibrant_text = [
  "Vibrant" ascii
]

const array(byte) deceased_text = [
  "Deceased" ascii
]

const array(byte) back_text = [
  "Back" ascii
]

const array(byte) sell_text = [
  "Sell " ascii
]

const array(byte) dispose_text = [
  "Dispose"
]

const array(byte) of_body_text = [
  "of body"
]

const array(byte) not_impl_text = [
  "Not impl" ascii
]

const array(byte) days_age_text = [
  " days" ascii
]