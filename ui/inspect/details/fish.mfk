import ui/inspect/inspect

import ui/inspect/fish

byte inspect_fish_details_index

void init_inspect_fish_details() {
  inspect_fish_details_index = current_inspect_page * 5 + current_inspect_row
}

inline bool inspect_fish_details_tick() {
  byte temp
  render_inspect_fish_item(inspect_fish_details_index, 3)

  if (input_can_be_consumed) {
    if (input_b != 0) {
      set_inspect_screen(inspect_fish)

      // Request screen redraw
      set_screen_forcibly(inspect)
      return true
    }
  }

  return false
}

void draw_inspect_fish_details_content() {
  array(byte) data [11]
  FishType type
  byte i
  byte length

  type = fish_type[inspect_fish_details_index]

  draw_fish_name(type, 7, 4, 0)

  length = sex_text.length
  for i,0,until,sex_text.length {
    data[i] = sex_text[i]
  }

  if (fish_sex[inspect_fish_details_index]) {
    for i,0,until,male_text.length {
      data[sex_text.length + i] = male_text[i]
    }
    length += male_text.length
  } else {
    for i,0,until,female_text.length {
      data[sex_text.length + i] = female_text[i]
    }
    length += female_text.length
  }

  draw_text(17, 4, data.pointer, length, 0)

  // HR
  ppu_set_addr(ppu_nametable0 + 6 * 32 + 2)
  for i,0,until,28 {
    ppu_write_data($B0)
  }

  draw_back_button(4, 24)
  draw_start_select_button(22, 25)
}

void draw_back_button(byte x, byte y) {
  word address
  address = ppu_nametable0 + word(y) * 32 + word(x)

  ppu_set_addr(address)
  ppu_write_data($C0)
  ppu_write_data($C1)
  
  ppu_set_addr(address + 32)
  ppu_write_data($C2)
  ppu_write_data($C3)

  draw_text(x - 1, y - 1, back_text.pointer, back_text.length, 0)
}

void draw_start_select_button(byte x, byte y) {
  byte i
  word price
  array(byte) text_data [7]
  ppu_set_addr(ppu_nametable0 + word(y) * 32 + word(x))

  ppu_write_data($B1)
  ppu_write_data($B2)
  ppu_write_data($B3)
  ppu_write_data($B4)
  ppu_write_data($B5)
  ppu_write_data($B6)
  ppu_write_data($B7)

  for i,0,until,sell_text.length {
    text_data[i] = sell_text[i]
  }

  price = 35

  bcdConvert(price)

  if (bcdResult[1] != 0) {
    // Two digit number
    text_data[sell_text.length] = bcdResult[1] + $30
  } else {
    // Empty space
    text_data[sell_text.length] = $20
  }

  text_data[sell_text.length + 1] = bcdResult[0] + $30

  draw_text(x, y - 2, text_data.pointer, text_data.length, 0)
}

const array(byte) sex_text = [
  "Sex: " ascii
]

const array(byte) male_text = [
  "Male" ascii
]

const array(byte) female_text = [
  "Female" ascii
]

const array(byte) back_text = [
  "Back" ascii
]

const array(byte) sell_text = [
  "Sell " ascii
]