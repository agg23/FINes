import palette

import ui/shared
import ui/components/details

import ui/inspect/inspect
import ui/inspect/details/fish

void draw_inspect() {
  byte i
  byte j

  // Clear NT
  read_ppu_status()
  ppu_set_addr(ppu_nametable0)
  for i,0,until,30 {
    for j,0,until,32 {
      ppu_write_data(0)
    }
  }

  // Clear AT
  ppu_set_addr(ppu_attrtable0)
  for i,0,until,64 {
    ppu_write_data(0)
  }

  draw_inspect_title()

  for i,0,until,current_inspect_page_length {
    draw_inspect_row(i)
  }

  // Highlight selected item
  draw_inspect_item_attr(current_inspect_row, true)

  set_bank_1()

  load_inspect_palette()

  enable_sprite0 = false

  if (inspect_screen == inspect_fish_details) {
    draw_inspect_details()
  }
}

void draw_inspect_row(byte i) {
  byte j
  word address

  address = ppu_nametable0 + word(i) * word(32 * 5) + 4 * 32 + 2
  ppu_set_addr(address)

  ppu_write_data($96)
  for j,0,until,26 {
    ppu_write_data($80)
  }
  ppu_write_data($97)

  address += 32 - 1
  ppu_set_addr(address)
  ppu_write_data($A0)
  ppu_write_data($91)

  ppu_set_addr(address + 28)
  ppu_write_data($83)
  ppu_write_data($A1)

  address += 32
  ppu_set_addr(address)
  ppu_write_data($A2)
  ppu_write_data($94)

  ppu_set_addr(address + 28)
  ppu_write_data($86)
  ppu_write_data($A3)

  address += 32 + 1
  ppu_set_addr(address)

  ppu_write_data($A4)
  for j,0,until,26 {
    ppu_write_data($81)
  }
  ppu_write_data($A5)

  draw_inspect_item(current_inspect_page * 5 + i, i * 5 + 5)
}

void draw_inspect_title() {
  byte i
  ppu_set_addr(ppu_nametable0 + 64 + 6)

  if (inspect_packed_length > 0) {
    draw_text(6, 2, inspect_fish_title_text.pointer, inspect_fish_title_text.length, 0)

    ppu_write_data(current_inspect_page + 1 + $30)
    // Forward slash
    ppu_write_data($2F)
    ppu_write_data(current_inspect_page_count + $30)
  } else {
    draw_text(6 + 2, 2, no_owned_fish_text.pointer, no_owned_fish_text.length, 0)
  }
}

void draw_inspect_item(byte i, byte y) {
  if (inspect_screen == inspect_fish) {
    draw_inspect_fish_item(i, y)
  }
}

void draw_inspect_item_attr(byte i, bool is_active) {
  byte j
  byte active_color
  byte inactive_color
  byte top_entry
  byte bottom_entry
  array(byte) data [16]

  if (is_active) {
    active_color = 1
  } else {
    active_color = 0
  }

  inactive_color = 0

  bottom_entry = $FF

  if (i == 0) {
    build_attribute_table_entry(active_color, active_color, active_color, active_color, top_entry)
  } else if (i == 1) {
    build_attribute_table_entry(active_color, active_color, active_color, active_color, top_entry)

    build_attribute_table_entry(active_color, active_color, inactive_color, inactive_color, bottom_entry)
  } else if (i == 2) {
    build_attribute_table_entry(inactive_color, inactive_color, active_color, active_color, top_entry)

    build_attribute_table_entry(active_color, active_color, inactive_color, inactive_color, bottom_entry)
  } else if (i == 3) {
    build_attribute_table_entry(inactive_color, inactive_color, active_color, active_color, top_entry)

    build_attribute_table_entry(active_color, active_color, active_color, active_color, bottom_entry)
  } else {
    build_attribute_table_entry(active_color, active_color, active_color, active_color, top_entry)
  }

  for j,0,until,8 {
    data[j] = top_entry
  }

  if (bottom_entry == $FF) {
    // Only need to write top
    add_buffered_write(ppu_attrtable0 + ((i * 5 + 4) >> 2) * 8, false, data.pointer, 8, false)
  } else {
    for j,0,until,8 {
      data[j + 8] = bottom_entry
    }

    add_buffered_write(ppu_attrtable0 + ((i * 5 + 4) >> 2) * 8, false, data.pointer, data.length, false)
  }
}

void draw_inspect_details() {
  draw_details_panel(true)

  draw_inspect_fish_details_content()

  set_bank_1()

  enable_sprite0 = false
}

void render_inspect() {
  byte i

  for i,0,until,current_inspect_page_length {
    render_inspect_item(current_inspect_page * 5 + i, i, i * 5 + 4)
  }
}

void render_inspect_item(byte i, byte row, byte y) {
  if (inspect_screen == inspect_fish) {
    render_inspect_fish_item(i, row, y)
    if (fish_alive[i]) {
      render_progress_indicator(23, y + 1, fish_health[i], false)
    }
  }
}

void load_inspect_palette() {
  add_buffered_write(ppu_palette_ram, false, inspect_palette.pointer, $20, true)
}

const array(byte) inspect_fish_title_text = [
  "Owned Fish: Page " ascii
]

const array(byte) no_owned_fish_text = [
  "Owned Fish: None" ascii
]
