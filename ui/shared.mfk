macro void render_cursor(byte x_low, byte x_high, byte y_low, byte y_high) {
  oam_buffer[oam_index] = y_low
  oam_buffer[oam_index + 1] = $48
  oam_buffer[oam_index + 2] = 0
  oam_buffer[oam_index + 3] = x_low

  oam_index += 4

  oam_buffer[oam_index] = y_low
  oam_buffer[oam_index + 1] = $48
  oam_buffer[oam_index + 2] = %01000000
  oam_buffer[oam_index + 3] = x_high

  oam_index += 4

  oam_buffer[oam_index] = y_high
  oam_buffer[oam_index + 1] = $48
  oam_buffer[oam_index + 2] = %10000000
  oam_buffer[oam_index + 3] = x_low

  oam_index += 4

  oam_buffer[oam_index] = y_high
  oam_buffer[oam_index + 1] = $48
  oam_buffer[oam_index + 2] = %11000000
  oam_buffer[oam_index + 3] = x_high

  oam_index += 4
}

/**
* Draws the provided text, using the `x` position as the ending location of the write
*/
inline void draw_text_right(byte x, byte y, pointer.byte text, byte length) {
  draw_text(x - length, y, text, length, 0)
}

/**
* @param center_length If provided (non-zero), center the text within this length, preferring the left side
*/
inline void draw_text(byte x, byte y, pointer.byte text, byte length, byte center_length) {
  byte i
  
  if (center_length != 0) {
    x += (center_length - length) / 2
  }

  read_ppu_status()
  ppu_set_addr(ppu_nametable0 + 32 * word(y) + word(x))

  for i,0,until,length {
    ppu_write_data(text[i])
  }
}

macro void build_attribute_table_entry(byte top_left, byte top_right, byte bottom_left, byte bottom_right, byte output) {
  output = bottom_right
  output = (output << 2) | bottom_left
  output = (output << 2) | top_right
  output = (output << 2) | top_left
}