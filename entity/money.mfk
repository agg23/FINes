import to_decimal

import fish/fish
import entity/health

enum MoneySource {
  fish_sale,
  care_bonus,
  refund_money
}

word fish_bucks

word income_amount
word expenses_amount
word sales_amount
word care_bonus_amount

void init_money() {
  // Start with $100
  fish_bucks = 100
  income_amount = 0
  expenses_amount = 0
  sales_amount = 0
  care_bonus_amount = 0
}

inline bool purchase(byte cost) {
  if (fish_bucks < cost) {
    return false
  }

  fish_bucks -= cost
  expenses_amount += cost

  draw_money()

  return true
}

inline void refund(byte cost) {
  fish_bucks += cost

  draw_money()
}

void earn(byte amount, MoneySource source) {
  if (source == fish_sale) {
    income_amount += amount
    sales_amount += amount
    refund(amount)
  } else if (source == care_bonus) {
    income_amount += amount
    care_bonus_amount += amount
    refund(amount)
  } else if (source == refund_money) {
    expenses_amount -= amount
    refund(amount)
  }
}

void draw_money() {
  array(byte) data [6]
  // Dollar sign
  data[0] = $24
  // TODO: This does not appear to work when enabling optimization
  bcdConvert(fish_bucks)

  byte i
  for i,0,until,5 {
    data[i + 1] = bcdResult[4 - i] + $30
  }

  add_buffered_write(ppu_nametable0 + 64 + 24, false, data.pointer, 6, false)
}

void money_tick() {
  byte bonus

  if (not(has_alive_fish())) {
    // No fish, no care bonus
    return
  }

  // Based on health, give money every day

  if (overall_health > $40) {
    // Health over $40, calculate bonus
    bonus = (overall_health - $40) >> 4
  } else {
    bonus = 0
  }

  earn(10 + bonus, care_bonus)
}