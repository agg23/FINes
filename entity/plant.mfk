import entity/health

import graphics_buffer

enum PlantType {
  rotala
  anubias
  babytears
}

enum PlantSize {
  small
  medium
  large
}

const byte MAX_PLANT_COUNT = 10

array(bool) plant_active [MAX_PLANT_COUNT]
array(PlantType) plant_type [MAX_PLANT_COUNT]
array(byte) plant_x [MAX_PLANT_COUNT]
array(PlantSize) plant_size [MAX_PLANT_COUNT]

void init_plants() {
  add_plant(rotala, 5, large)

  add_plant(babytears, 8, small)
  add_plant(babytears, 10, medium)
  add_plant(babytears, 12, small)


  // TODO: Adding one more plant crashes the buffer renderer
  // add_plant(babytears, 14, medium)
  add_plant(anubias, 16, medium)
  // add_plant(babytears, 20, medium)
}

void add_plant(PlantType type, byte x, PlantSize size) {
  byte i

  for i,0,until,MAX_PLANT_COUNT {
    if (not(plant_active[i])) {
      plant_active[i] = true
      plant_type[i] = type
      plant_x[i] = x
      plant_size[i] = size

      return
    }
  }
}

void render_plant() {
  byte i
  byte temp
  array(byte) data [10]

  for i,0,until,MAX_PLANT_COUNT {
    if (plant_active[i]) {
      temp = plant_x[i]

      if (plant_type[i] == rotala) {
        render_rotala(i, temp, data.pointer)
      } else if (plant_type[i] == babytears) {
        render_babytears(i, temp, data.pointer)
      } else if (plant_type[i] == anubias) {
        render_anubias(i, temp, data.pointer)
      }
    }
  }
}

inline void render_rotala(byte i, byte x, pointer.byte data) {
  byte count
  if (plant_size[i] == large) {
    count = 3
  } else if (plant_size[i] == medium) {
    count = 2
  } else {
    count = 1
  }

  byte j
  for j,0,until,count {
    data[j] = $88
  }

  word height_from_floor
  height_from_floor = ((word(active_tank.y_high) >> 3) - count + 1) * 32

  add_buffered_write(ppu_nametable0 + height_from_floor + x, true, data, count)

  data[0] = %10101010
  // active_tank.y_high / 32 * 8
  // TODO: Properly combine these shifts with a mask
  add_buffered_write(ppu_attrtable0 + ((word(active_tank.y_high) >> 5) << 3) + (x >> 2), false, data, 1)
}

inline void render_babytears(byte i, byte x, pointer.byte data) {
  word height_from_floor
  if (plant_size[i] == medium) {
    data[0] = $9E
    data[1] = $9F

    height_from_floor = ((word(active_tank.y_high) >> 3) - 1) * 32

    add_buffered_write(ppu_nametable0 + height_from_floor + x, false, data, 2)

    data[0] = $A8
    data[1] = $A9
    add_buffered_write(ppu_nametable0 + height_from_floor + 32 + x, false, data, 2)
  } else if (plant_size[i] == small) {
    data[0] = $9C
    data[1] = $9D

    height_from_floor = (word(active_tank.y_high) >> 3) * 32

    add_buffered_write(ppu_nametable0 + height_from_floor + x, false, data, 2)
  }

  data[0] = %01010101
  // active_tank.y_high / 32 * 8
  // TODO: Properly combine these shifts with a mask
  add_buffered_write(ppu_attrtable0 + ((word(active_tank.y_high) >> 5) << 3) + (x >> 2), false, data, 1)
}

inline void render_anubias(byte i, byte x, pointer.byte data) {
  word height_from_floor

  data[0] = $89
  data[1] = $8C
  data[2] = $8F
  data[3] = $9A

  height_from_floor = ((word(active_tank.y_high) >> 3) - 3) * 32

  add_buffered_write(ppu_nametable0 + height_from_floor + x, true, data, 4)

  data[0] = $8A
  data[1] = $8D
  data[2] = $98
  data[3] = $9B
  add_buffered_write(ppu_nametable0 + height_from_floor + x + 1, true, data, 4)

  data[0] = $8B
  data[1] = $8E
  data[2] = $99
  data[3] = $0
  add_buffered_write(ppu_nametable0 + height_from_floor + x + 2, true, data, 4)

  data[0] = %01010101
  // active_tank.y_high / 32 * 8
  // TODO: Properly combine these shifts with a mask
  add_buffered_write(ppu_attrtable0 + ((word(active_tank.y_high) >> 5) << 3) + (x >> 2), false, data, 1)
}

void plant_tick() {
  byte i

  for i,0,until,MAX_PLANT_COUNT {
    if (not(plant_active[i])) {
      continue
    }

    if (rand() < $60) {
      decrease_ammonia(1)
    }
  }
}