import graphics

const byte MAX_WRITE_BUFFER_LENGTH = 255
const byte MAX_COMMAND_BUFFER_LENGTH = 20

array(byte) write_buffer [MAX_WRITE_BUFFER_LENGTH]

array(word) command_buffer_address [MAX_COMMAND_BUFFER_LENGTH]
array(byte) command_buffer_length [MAX_COMMAND_BUFFER_LENGTH]
array(byte) command_buffer_index [MAX_COMMAND_BUFFER_LENGTH]
array(bool) command_buffer_column [MAX_COMMAND_BUFFER_LENGTH]
array(bool) command_buffer_pending [MAX_COMMAND_BUFFER_LENGTH]

byte first_open_command_index
byte first_pending_command_index

byte first_open_buffer_index
byte first_data_buffer_index

void init_buffer() {
  first_open_command_index = 0
  first_pending_command_index = 0
  first_open_buffer_index = 0
  first_data_buffer_index = 0
}

inline void process_buffered_writes() {
  byte i
  bool does_wrap

  if (first_open_command_index < first_pending_command_index) {
    does_wrap = true
  } else {
    does_wrap = false
  }

  byte current_command_length
  byte written_length
  written_length = 0

  if (does_wrap) {
    // TODO: Fix
    asm {
      kil
    }
  } else {
    for i,first_pending_command_index,until,first_open_command_index {
      if (not(command_buffer_pending[i])) {
        // Queue completely clear. 
        init_buffer()
        return
      }

      current_command_length = command_buffer_length[i]

      if (written_length + current_command_length > 36) {
        return
      }

      process_command(i)
      written_length += current_command_length
    }

    // Queue completely clear. 
    init_buffer()
  }
}

inline void process_command(byte command_index) {
  byte i
  byte index
  byte length_to_end
  bool does_wrap

  index = command_buffer_index[command_index]

  if (command_buffer_length[command_index] + index >= MAX_WRITE_BUFFER_LENGTH) {
    does_wrap = true
  } else {
    does_wrap = false
  }

  if (command_buffer_column[command_index]) {
    read_ppu_status()
    ppu_ctrl = vertical_ppu_ctrl
  } else {
    read_ppu_status()
    ppu_ctrl = standard_ppu_ctrl
  }

  if (does_wrap) {
    length_to_end = MAX_WRITE_BUFFER_LENGTH - command_buffer_index[command_index]
    read_ppu_status()
    ppu_set_addr(command_buffer_address[command_index])
    for i,0,until,length_to_end {
      ppu_write_data(write_buffer[index + i])
    }

    // length_after_start
    length_to_end = command_buffer_length[command_index] - length_to_end
    for i,0,until,length_to_end {
      ppu_write_data(write_buffer[i])
    }

    first_data_buffer_index = length_to_end
  } else {
    read_ppu_status()
    ppu_set_addr(command_buffer_address[command_index])
    for i,0,until,command_buffer_length[command_index] {
      ppu_write_data(write_buffer[index + i])
    }

    first_data_buffer_index += command_buffer_length[command_index]
  }

  command_buffer_pending[command_index] = false
  if (first_pending_command_index == MAX_COMMAND_BUFFER_LENGTH - 1) {
    first_pending_command_index = 0
  } else {
    first_pending_command_index += 1
  }
}

inline void add_buffered_write(word address, bool write_column, pointer.byte data, byte length) {
  byte i
  byte temp
  byte length_to_end
  bool does_wrap
  byte index

  temp = MAX_WRITE_BUFFER_LENGTH - first_open_buffer_index
  if (temp < length) {
    // Space until end + index of first data after wrap
    temp = temp + first_data_buffer_index
    does_wrap = true
  } else {
    temp = MAX_WRITE_BUFFER_LENGTH - first_open_buffer_index
    does_wrap = false
  }

  // If free space < length
  if (temp < length) {
    // Out of buffer space
    asm {
      kil
    }

    return
  }

  if (command_buffer_pending[first_open_command_index]) {
    // Overran command buffer
    asm {
      kil
    }

    return
  }

  index = first_open_buffer_index

  if (does_wrap) {
    length_to_end = MAX_WRITE_BUFFER_LENGTH - first_open_buffer_index
    // length_after_start
    temp = length - length_to_end
    // Up to end of buffer
    for i,0,until,length_to_end {
      write_buffer[first_open_buffer_index + i] = data[i]
    }

    for i,0,until,temp {
      write_buffer[i] = data[length_to_end + i]
    }

    first_open_buffer_index = temp
  } else {
    for i,0,until,length {
      write_buffer[first_open_buffer_index + i] = data[i]
    }

    first_open_buffer_index = first_open_buffer_index + length
  }

  command_buffer_address[first_open_command_index] = address
  command_buffer_length[first_open_command_index] = length
  command_buffer_index[first_open_command_index] = index
  command_buffer_column[first_open_command_index] = write_column
  command_buffer_pending[first_open_command_index] = true

  if (first_open_command_index == MAX_COMMAND_BUFFER_LENGTH - 1) {
    first_open_command_index = 0
  } else {
    first_open_command_index += 1
  }
}
