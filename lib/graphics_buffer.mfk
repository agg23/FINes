import graphics

const byte MAX_WRITE_BUFFER_LENGTH = 64
const byte MAX_COMMAND_BUFFER_LENGTH = 10

array(byte) write_buffer [MAX_WRITE_BUFFER_LENGTH]

array(word) command_buffer_address [MAX_COMMAND_BUFFER_LENGTH]
array(byte) command_buffer_length [MAX_COMMAND_BUFFER_LENGTH]
array(byte) command_buffer_index [MAX_COMMAND_BUFFER_LENGTH]
array(bool) command_buffer_column [MAX_COMMAND_BUFFER_LENGTH]
array(bool) command_buffer_pending [MAX_COMMAND_BUFFER_LENGTH]

byte first_open_command_index
byte first_pending_command_index

byte first_open_buffer_index
byte first_data_buffer_index

void init_buffer() {
  first_open_command_index = 0
  first_pending_command_index = 0
  first_open_buffer_index = 0
  first_data_buffer_index = 0
}

void clear_buffer() {
  byte i
  for i,0,until,MAX_COMMAND_BUFFER_LENGTH {
    command_buffer_pending[i] = false
  }

  init_buffer()
}

inline void process_buffered_writes() {
  byte i

  byte current_command_length
  byte written_length
  written_length = 0

  for i,first_pending_command_index,until,first_open_command_index {
    if (not(command_buffer_pending[i])) {
      // Queue completely clear. 
      init_buffer()
      return
    }

    current_command_length = command_buffer_length[i]

    if (written_length + current_command_length > 36) {
      return
    }

    process_command(i)
    written_length += current_command_length
  }

  // Queue completely clear. 
  init_buffer()
}

inline void process_command(byte command_index) {
  byte i
  byte index
  byte length

  index = command_buffer_index[command_index]

  if (command_buffer_column[command_index]) {
    read_ppu_status()
    ppu_ctrl = vertical_ppu_ctrl
  } else {
    read_ppu_status()
    ppu_ctrl = standard_ppu_ctrl
  }

  // Removed ability for data to wrap
  length = command_buffer_length[command_index]
  read_ppu_status()
  ppu_set_addr(command_buffer_address[command_index])
  for i,0,until,length {
    ppu_write_data(write_buffer[index + i])
  }

  first_data_buffer_index += command_buffer_length[command_index]

  command_buffer_pending[command_index] = false
  first_pending_command_index += 1
}

void add_buffered_write(word address, bool write_column, pointer.byte data, byte length, bool always_buffer) {
  byte i
  byte temp
  byte length_to_end
  byte index

  if (not(drawing_enabled) && not(always_buffer)) {
    // The PPU is not currently enabled. Just write directly to PPU
    if (write_column) {
      read_ppu_status()
      ppu_ctrl = vertical_ppu_ctrl
    } else {
      read_ppu_status()
      ppu_ctrl = standard_ppu_ctrl
    }

    read_ppu_status()
    ppu_set_addr(address)
    for i,0,until,length {
      ppu_write_data(data[i])
    }

    return
  }

  if (first_open_command_index >= MAX_COMMAND_BUFFER_LENGTH) {
    // Overran command buffer

    asm {
      kil
    }

    return
  }

  temp = MAX_WRITE_BUFFER_LENGTH - first_open_buffer_index
  if (temp < length) {
    // Don't allow data wrapping
    asm {
      kil
    }

    return
  }

  if (command_buffer_pending[first_open_command_index]) {
    // Overran command buffer
    asm {
      kil
    }

    return
  }

  index = first_open_buffer_index

  for i,0,until,length {
    write_buffer[first_open_buffer_index + i] = data[i]
  }

  first_open_buffer_index = first_open_buffer_index + length

  command_buffer_address[first_open_command_index] = address
  command_buffer_length[first_open_command_index] = length
  command_buffer_index[first_open_command_index] = index
  command_buffer_column[first_open_command_index] = write_column
  command_buffer_pending[first_open_command_index] = true

  first_open_command_index += 1
}
