import asm_lib

macro void cap_velocity(byte hi, byte lo, byte cap) {
  if sbyte(hi) < -cap {
    hi = -cap
    lo = 0
  } else if sbyte(hi) > cap {
    hi = cap
    lo = 0
  }
}

macro void decay_velocity(byte hi, byte lo, byte decay) {
  if hi != 0 {
    if sbyte(hi) > 0 {
      sub_16_const(hi, lo, decay)
    } else {
        // Velocity is negative, so add in order to decay
      add_16_const(hi, lo, decay)
    }
  }
}

macro void cap_fish_location_to_active_tank(byte x, byte y) {
  // TODO: Add more than square tank
  
  if (x > $F0) {
    x = $F0
  } else if (x < $10) {
    x = $10
  }

  if (y > $E0) {
    y = $E0
  } else if (y < $20) {
    y = $20
  }
}
