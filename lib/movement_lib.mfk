import asm_lib

macro void cap_velocity(byte hi, byte lo, byte cap) {
    if sbyte(hi) < -cap {
        hi = -cap
        lo = 0
    } else if sbyte(hi) > cap {
        hi = cap
        lo = 0
    }
}

macro void decay_velocity(byte hi, byte lo, byte decay) {
    if hi != 0 {
        if sbyte(hi) > 0 {
            sub_16_const(hi, lo, decay)
        } else {
            // Velocity is negative, so add in order to decay
            add_16_const(hi, lo, decay)
        }
    }
}

macro void cap_location_to_active_room(word x, word y) {
    // word world_x
    // word world_y
    // word y_tile

    // if (x > active_room_x_pixel_high - 8) {
    //     x = active_room_x_pixel_high - 8
    // } else if (x < active_room_x_low + 8) {
    //     x = active_room_x_low + 8
    // }

    // if (y > active_room_y_pixel_high - 8) {
    //     y = active_room_y_pixel_high - 8
    // } else if (y < active_room_y_low + 8) {
    //     y = active_room_y_low + 8
    // }

    // world_x = x >> 3
    // world_y = y >> 3
    // y_tile = world_y * 32

    // if (test_level_collide(world_x, world_y)) {
    //     x = world_x << 3
    //     y = world_y << 3
    // }

    // if (test_level_x_collide(world_x, y_tile, true)) {
    //     x = world_x << 3
    // } else if (test_level_x_collide(world_x, y_tile, false)) {
    //     world_x += 1
    //     x = world_x << 3
    // }

    // if (test_level_y_collide(world_x, y_tile, true)) {
    //     y = world_y << 3
    // } else if (test_level_y_collide(world_x, y_tile, false)) {
    //     y = (world_y + 1) << 3
    // }
}
