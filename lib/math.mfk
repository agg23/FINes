macro void signed_division(sbyte a, byte b, sbyte output) {
  if (a < 0) {
    output = (byte(a) / b) | $80
  } else {
    output = a / b
  }
}

macro void signed_division_const(sbyte a, byte const b, sbyte output) {
  if (a < 0) {
    // Output will also be negative
    output = 0 - ((byte(a) & $7F) / b)
  } else {
    output = a / b
  }
}

macro void signed16_division_const(signed16 a, byte const b, signed16 output) {
  if (a < 0) {
    // Output will also be negative
    output = 0 - ((word(a) & $7FFF) / b)
  } else {
    output = a / b
  }
}

macro void signed16_division(word a, byte b, word output) {
  if (a.hi & $80 != 0) {
    // Output will also be negative
    output = 0 - ((word(a) & $7FFF) / b)
  } else {
    output = a / b
  }
}

macro void arithmetic_shift_right(byte a) {
  asm {
    lda a
    cmp #$80
    ror a
  }
}

// From http://forum.6502.org/viewtopic.php?f=2&t=5317#p63391
macro asm void signed16_arithmetic_shift_right(signed16 ref input) {
  lda input.hi
  cmp #$80
  ror                  // load the msb
  ror input.lo      // rotate the lsb as normal
  tax                  // check sign
  bpl .done
  bcc .done
  inc input.lo      // adjust toward 0 only if
  bne .done             //   # < 0 and remainder = 1
  inx
.done:
  stx input.hi      // store msb
}

inline word absolute_value(signed16 input) {
  word output
  if (input < 0) {
    output.hi = input.hi ^ $FF
    output.lo = input.lo ^ $FF
    output += 1
  } else {
    output = input
  }

  return output
}