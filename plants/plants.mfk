import ui/shared
import entity/health

import tank/state

import plants/anubias
import plants/microsword
import plants/rotala
import plants/sagittaria
import plants/amazonsword

enum PlantType {
  rotala
  anubias
  microsword
  sagittaria
  amazonsword
  marimo
}

enum PlantSize {
  small
  medium
  large
}

enum PlantPalette {
  palette_red,
  palette_green,
  palette_unset
}

const byte MAX_PLANT_COUNT = 20
const byte MAX_PLANT_COLUMNS = 30

array(bool) plant_active [MAX_PLANT_COUNT]
array(PlantType) plant_type [MAX_PLANT_COUNT]
array(byte) plant_x [MAX_PLANT_COUNT]
array(PlantSize) plant_size [MAX_PLANT_COUNT]
array(PlantPalette) plant_current_palettes [MAX_PLANT_COLUMNS >> 1]
array(byte) plant_at_x [MAX_PLANT_COLUMNS]
array(byte) plant_current_width [MAX_PLANT_COUNT]

byte plant_min_x
byte plant_max_x_bound

void init_plants() {
  byte i
  plant_min_x = active_tank.x_low >> 3
  plant_max_x_bound = (active_tank.x_high >> 3) - plant_min_x + 1

  for i,0,until,MAX_PLANT_COUNT {
    plant_active[i] = false
  }

  for i,0,until,MAX_PLANT_COLUMNS {
    plant_at_x[i] = $FF
  }

  for i,0,until,15 {
    plant_current_palettes[i] = palette_unset
  }
}

void add_plant(PlantType type, byte x, PlantSize size, byte max_width) {
  byte i
  byte j
  byte actual_width

  for i,0,until,MAX_PLANT_COUNT {
    if (not(plant_active[i])) {
      plant_active[i] = true
      plant_type[i] = type
      plant_x[i] = x
      plant_size[i] = size

      if (plant_expected_width[type] < max_width) {
        actual_width = plant_expected_width[type]
      } else if (max_width < plant_min_width[type]) {
        // Should not happen
        asm {
          kil
        }
        return
      } else {
        actual_width = max_width
      }

      plant_current_width[i] = actual_width

      for j,0,until,actual_width {
        plant_at_x[x + j] = i
        plant_current_palettes[(x + j) >> 1] = plant_type_palette[type]
      }
      
      return
    }
  }
}

void draw_plants() {
  byte i
  byte temp
  for i,0,until,MAX_PLANT_COUNT {
    if (plant_active[i]) {
      draw_plant_i(i, plant_x[i])
    }
  }
}

void draw_plant_at_x(byte x) {
  byte i
  for i,0,until,MAX_PLANT_COUNT {
    if (plant_active[i] && plant_x[i] == x) {
      draw_plant_i(i, x)
    }
  }
}

void draw_plant_i(byte i, byte x) {
  draw_plant_of_type(plant_type[i], plant_size[i], x, true, plant_current_width[i], 0)
}

void draw_plant_of_type(PlantType type, PlantSize size, byte x, bool write_attr, byte width, byte custom_bottom_y) {
  array(byte) data [10]

  if (type == rotala) {
    draw_rotala(size, x, data.pointer, write_attr, custom_bottom_y)
  } else if (type == microsword) {
    draw_microsword(size, x, data.pointer, write_attr, width, custom_bottom_y)
  } else if (type == anubias) {
    draw_anubias(size, x, data.pointer, write_attr, custom_bottom_y)
  } else if (type == sagittaria) {
    draw_sagittaria(size, x, data.pointer, write_attr, custom_bottom_y)
  } else if (type == amazonsword) {
    draw_amazonsword(size, x, data.pointer, write_attr, custom_bottom_y)
  } else if (type == marimo) {
    draw_marimo(size, x, data.pointer, write_attr, custom_bottom_y)
  }
}

void build_and_write_plant_attribute_table(byte x_offset, PlantType type, byte width, byte custom_bottom_y) {
  array(byte) data [2]
  byte x
  byte output
  PlantPalette temp_palette
  byte prev_palette_number
  byte next_palette_number
  PlantPalette plant_palette_for_type

  x = x_offset - plant_min_x

  plant_palette_for_type = plant_type_palette[type]

  // Either sits in the middle of a attr table entry, or spans two entries
  if (x_offset >> 2 == (x_offset + width - 1) >> 2) {
    // Entirely within attr table entry

    if ((x_offset >> 1) & 1 != 0) {
      next_palette_number = palette_number_for_palette[plant_palette_for_type]

      // Odd 16x16, use previous palette
      if (x_offset < 3 + plant_min_x) {
        // Prev is wall
        prev_palette_number = 0
      } else {
        temp_palette = plant_current_palettes[(x >> 1) - 1]

        if (temp_palette == palette_unset) {
          // No palette set behind
          prev_palette_number = next_palette_number
        } else {
          prev_palette_number = palette_number_for_palette[temp_palette]
        }
      }
    } else {
      prev_palette_number = palette_number_for_palette[plant_palette_for_type]

      // Even 16x16, use next palette
      if (x_offset + width > plant_max_x_bound + plant_min_x - 1) {
        // Next is wall
        next_palette_number = 0
      } else {
        temp_palette = plant_current_palettes[(x >> 1) + 1]

        if (temp_palette == palette_unset) {
          // No palette set in front
          next_palette_number = prev_palette_number
        } else {
          next_palette_number = palette_number_for_palette[temp_palette]
        }
      }
    }

    // next_palette_number = palette_number_for_palette[plant_palette_for_type]
    // TODO: This does not consider say a single width plant (rotala), as it always will "fit" as per the check above. This needs to also
    // check whether it's in the first or second half of the attr entry, and select the colors as required
    build_attribute_table_entry(prev_palette_number, next_palette_number, prev_palette_number, next_palette_number, output)

    data[0] = output
    write_plant_attribute_table(x_offset, data.pointer, 1, custom_bottom_y)
  } else {
    // Spans two entries
    if (x_offset < 3 + plant_min_x) {
      // Prev is wall
      prev_palette_number = 0
    } else {
      temp_palette = plant_current_palettes[(x >> 1) - 1]
      prev_palette_number = palette_number_for_palette[temp_palette]
    }
    next_palette_number = palette_number_for_palette[plant_palette_for_type]

    // Write prev attr table entry
    build_attribute_table_entry(prev_palette_number, next_palette_number, prev_palette_number, next_palette_number, output)
    data[0] = output

    if (x_offset + width > plant_max_x_bound + plant_min_x - 3) {
      // Next is wall
      next_palette_number = 0
    } else {
      temp_palette = plant_current_palettes[(x >> 1) + 1]
      next_palette_number = palette_number_for_palette[temp_palette]
    }

    prev_palette_number = palette_number_for_palette[plant_palette_for_type]

    // Write next attr table entry
    build_attribute_table_entry(prev_palette_number, next_palette_number, prev_palette_number, next_palette_number, output)

    data[1] = output
    write_plant_attribute_table(x_offset, data.pointer, 2, custom_bottom_y)
  }
}

macro void write_plant_attribute_table(byte x_offset, pointer.byte data, byte const length, byte custom_bottom_y) {
  add_buffered_write(ppu_attrtable0 + plant_attr_y(custom_bottom_y) + (x_offset >> 2), false, data, length, false)

  if (custom_bottom_y == 0) {
    // TODO: Optimize this
    // Only draw full height outside of shop
    add_buffered_write(ppu_attrtable0 + plant_attr_y(custom_bottom_y) - 8 + (x_offset >> 2), false, data, length, false)
  }
}

void plant_tick() {
  byte i

  for i,0,until,MAX_PLANT_COUNT {
    if (not(plant_active[i])) {
      continue
    }

    // TODO: Base on plant size
    decrease_ammonia(1)
    if (decrease_co2(2)) {
      // Only increase O2 if there was CO2 to pull
      increase_oxygen(2)
    }
  }
}

inline word plant_tile_height_from_floor(byte height, byte custom_bottom_y) {
  if (custom_bottom_y != 0) {
    return word(custom_bottom_y - height + 1) * 32
  }

  return ((word(active_tank.y_high) >> 3) - height + 1) * 32
}

inline word plant_attr_y(byte custom_bottom_y) {
  if (custom_bottom_y != 0) {
    // Y to attr row (div 4), then multiply by 8 for row index
    return (custom_bottom_y >> 2) << 3
  }

  return (word(active_tank.y_high) >> 5) << 3
}

// rotala, anubias, microsword, sagittaria, amazonsword, marimo
const array(byte) plant_expected_width[PlantType] = [1, 3, 2, 3, 3, 2]
const array(byte) plant_min_width[PlantType] = [1, 3, 1, 3, 3, 2]
const array(byte) plant_max_editor_height[PlantType] = [5, 6, 3, 6, 6, 2]
const array(PlantPalette) plant_type_palette[PlantType] = [palette_red, palette_green, palette_green, palette_green, palette_green, palette_green]
const array(byte) palette_number_for_palette[PlantPalette] = [2, 1, 0]