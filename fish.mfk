import random
import custom_random

struct Fish {
  byte x,
  byte y,
  word velocity_x,
  word velocity_y
}

Fish fish

array(Fish) fish_instances [20]
byte active_fish_count = 0

const word FISH_MAX_VELOCITY_PER_TICK = $180
const byte FISH_MAX_VELOCITY = 6
const byte FISH_DECAY_VELOCITY_PER_TICK = $20

void init_fish() {
  Fish fish0
  Fish fish1
  Fish fish2

  fish0.x = 100
  fish0.y = 100

  fish_instances[0] = fish0

  fish1.x = 120
  fish1.y = 90

  fish_instances[1] = fish1

  fish2.x = 90
  fish2.y = 105

  fish_instances[2] = fish2

  active_fish_count = 3
}

void fish_tick() {
  byte i
  byte direction
  byte x
  byte y
  word velocity_x
  word velocity_y
  pointer.Fish fish

  for i,0,until,active_fish_count {
    fish = fish_instances[i].pointer

    velocity_x = fish.velocity_x
    velocity_y = fish.velocity_y

    direction = rand()

    if direction < $10 {
      // Low chance to move vertically
      if direction < $5 {
        // Up
        velocity_y -= FISH_MAX_VELOCITY_PER_TICK
      } else {
        // Down
        velocity_y += FISH_MAX_VELOCITY_PER_TICK
      }
    } else {
      if direction < $78 {
        // Left
        velocity_x -= FISH_MAX_VELOCITY_PER_TICK
      } else {
        // Right
        velocity_x += FISH_MAX_VELOCITY_PER_TICK
      }
    }

    cap_velocity(velocity_x.hi, velocity_x.lo, FISH_MAX_VELOCITY)
    cap_velocity(velocity_y.hi, velocity_y.lo, FISH_MAX_VELOCITY)

    fish->x += sbyte(velocity_x.hi)
    fish->y += sbyte(velocity_y.hi)

    // cap_location_to_active_room(x, y)

    decay_velocity(velocity_x.hi, velocity_x.lo, FISH_DECAY_VELOCITY_PER_TICK)
    decay_velocity(velocity_y.hi, velocity_y.lo, FISH_DECAY_VELOCITY_PER_TICK)

    fish->velocity_x = velocity_x
    fish->velocity_y = velocity_y
  }
}