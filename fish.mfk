import random
import custom_random
import movement_lib

enum Direction {
  up,
  down,
  left,
  right
}

struct Fish {
  byte x,
  byte y,
  word velocity_x,
  word velocity_y,
  Direction direction
}

Fish fish

const byte FISH_MAX_COUNT = 20

array(Fish) fish_instances [FISH_MAX_COUNT]
byte active_fish_count = 0

const word FISH_MAX_VELOCITY_PER_TICK = $100
const byte FISH_MAX_VELOCITY = 2
const byte FISH_DECAY_VELOCITY_PER_TICK = $20

void init_fish() {
  Fish fish0
  Fish fish1
  Fish fish2

  fish0.x = 100
  fish0.y = 100

  fish_instances[0] = fish0

  fish1.x = 120
  fish1.y = 90

  fish_instances[1] = fish1

  fish2.x = 90
  fish2.y = 105

  fish_instances[2] = fish2

  active_fish_count = 3
}

void spawn_fish() {
  if (active_fish_count >= FISH_MAX_COUNT) {
    return
  }

  Fish fish
  fish.x = $80
  fish.y = $20

  fish_instances[active_fish_count] = fish

  active_fish_count += 1
}

void fish_tick() {
  byte temp
  byte i
  byte random_direction
  byte x
  byte y
  word velocity_x
  word velocity_y
  Direction direction
  pointer.Fish fish

  for i,0,until,active_fish_count {
    fish = fish_instances[i].pointer

    x = fish->x
    y = fish->y
    velocity_x = fish->velocity_x
    velocity_y = fish->velocity_y

    temp = rand()

    if (temp > $E0) {
      random_direction = rand()

      if random_direction < $10 {
        // Low chance to move vertically
        if random_direction < $5 {
          // Up
          velocity_y -= FISH_MAX_VELOCITY_PER_TICK
        } else {
          // Down
          velocity_y += FISH_MAX_VELOCITY_PER_TICK
        }
      } else {
        if random_direction < $78 {
          // Left
          velocity_x -= FISH_MAX_VELOCITY_PER_TICK
        } else {
          // Right
          velocity_x += FISH_MAX_VELOCITY_PER_TICK
        }
      }

      cap_velocity(velocity_x.hi, velocity_x.lo, FISH_MAX_VELOCITY)
      cap_velocity(velocity_y.hi, velocity_y.lo, FISH_MAX_VELOCITY)
    }

    x += sbyte(velocity_x.hi)
    y += sbyte(velocity_y.hi)

    cap_fish_location_to_active_tank(x, y)

    fish->x = x
    fish->y = y

    // decay_velocity(velocity_x.hi, velocity_x.lo, FISH_DECAY_VELOCITY_PER_TICK)
    // decay_velocity(velocity_y.hi, velocity_y.lo, FISH_DECAY_VELOCITY_PER_TICK)

    fish->velocity_x = velocity_x
    fish->velocity_y = velocity_y
  }
}