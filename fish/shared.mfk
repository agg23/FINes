macro void render_two_tile_fish(byte x, byte y, byte mask, bool pos_direction, byte const palette, byte const first_tile, byte const second_tile) {
  oam_buffer[oam_index] = y
  if (pos_direction) {
    oam_buffer[oam_index + 1] = first_tile
  } else {
    oam_buffer[oam_index + 1] = second_tile
  }
  oam_buffer[oam_index + 2] = mask | palette
  oam_buffer[oam_index + 3] = x - 8

  // Tile 2
  oam_buffer[oam_index + 4] = y
  if (pos_direction) {
    oam_buffer[oam_index + 5] = second_tile
  } else {
    oam_buffer[oam_index + 5] = first_tile
  }
  oam_buffer[oam_index + 6] = mask | palette
  oam_buffer[oam_index + 7] = x

  oam_index += 8
}

macro void render_three_tile_fish(byte x, byte y, byte mask, bool pos_direction, byte const palette, byte const first_tile, byte const second_tile, byte const third_tile) {
  oam_buffer[oam_index] = y
  if (pos_direction) {
    oam_buffer[oam_index + 1] = first_tile
  } else {
    oam_buffer[oam_index + 1] = third_tile
  }
  oam_buffer[oam_index + 2] = mask | palette
  oam_buffer[oam_index + 3] = x - 12

  // Tile 2
  oam_buffer[oam_index + 4] = y
  oam_buffer[oam_index + 5] = second_tile
  // Palette 1
  oam_buffer[oam_index + 6] = mask | palette
  oam_buffer[oam_index + 7] = x - 4

  oam_buffer[oam_index + 8] = y
  if (pos_direction) {
    oam_buffer[oam_index + 9] = third_tile
  } else {
    oam_buffer[oam_index + 9] = first_tile
  }
  // Palette 1
  oam_buffer[oam_index + 10] = mask | palette
  oam_buffer[oam_index + 11] = x + 4

  oam_index += 12
}
