import ui/shared
import ui/gameover
import fish/fish

import fish/tetra
import fish/rasbora
import fish/cory
import fish/betta

const byte CHEAPEST_FISH_PRICE = min(BETTA_ANY_PRICE, CORY_ANY_PRICE, RASBORA_ANY_PRICE, TETRA_ANY_PRICE)

byte fish_any_price(FishType type) {
  if (type == tetra) {
    return TETRA_ANY_PRICE
  } else if (type == rasbora) {
    return RASBORA_ANY_PRICE
  } else if (type == cory) {
    return CORY_ANY_PRICE
  } else if (type == betta) {
    return BETTA_ANY_PRICE
  }

  return 0
}

byte fish_sexed_price(FishType type) {
  if (type == tetra) {
    return TETRA_SEXED_PRICE
  } else if (type == rasbora) {
    return RASBORA_SEXED_PRICE
  } else if (type == cory) {
    return CORY_SEXED_PRICE
  }

  // Betta omitted

  return 0
}

byte fish_base_sale_price(FishType type) {
  if (type == tetra) {
    return TETRA_BASE_SALE_PRICE
  } else if (type == rasbora) {
    return RASBORA_BASE_SALE_PRICE
  } else if (type == cory) {
    return CORY_BASE_SALE_PRICE
  } else if (type == betta) {
    return BETTA_BASE_SALE_PRICE
  }

  return 0
}

byte fish_quality_price(FishQuality quality, byte base_price) {
  if (quality == poor) {
    return base_price >> 4
  } else if (quality == fair) {
    return base_price >> 3
  } else if (quality == average) {
    return base_price >> 2
  } else if (quality == good) {
    return base_price >> 1
  }

  return base_price
}

byte fish_health_price(byte health) {
  if (health > $C0) {
    return 5
  } else if (health > $80) {
    return 2
  } else if (health > $40) {
    return -2
  }
  
  return -4
}

byte fish_sale_price(byte i) {
  byte price
  byte temp
  price = fish_base_sale_price(fish_type[i])
  temp = fish_health_price(fish_health[i])

  if ((price + temp) & $80 != 0) {
    // Price would go neg. Set price to 1
    return 1
  }

  return price + fish_quality_price(fish_quality[i], price) + temp
}

/**
* @param center_length If provided (non-zero), center the text within this length, preferring the left side
*/
inline void draw_fish_name(FishType type, byte x, byte y, byte center_length) {
  if (type == tetra) {
    draw_text(x, y, tetra_name_text.pointer, tetra_name_text.length, center_length)
  } else if (type == rasbora) {
    draw_text(x, y, rasbora_name_text.pointer, rasbora_name_text.length, center_length)
  } else if (type == cory) {
    draw_text(x, y, cory_name_text.pointer, cory_name_text.length, center_length)
  } else if (type == betta) {
    draw_text(x, y, betta_name_text.pointer, betta_name_text.length, center_length)
  }
}

inline void draw_fish_any_price(FishType type, byte x, byte y) {
  if (type == tetra) {
    draw_text(x, y, tetra_any_price_text.pointer, tetra_any_price_text.length, 0)
  } else if (type == rasbora) {
    draw_text(x, y, rasbora_any_price_text.pointer, rasbora_any_price_text.length, 0)
  } else if (type == cory) {
    draw_text(x, y, cory_any_price_text.pointer, cory_any_price_text.length, 0)
  } else if (type == betta) {
    draw_text(x, y, betta_any_price_text.pointer, betta_any_price_text.length, 0)
  }
}

inline void draw_fish_sexed_price(FishType type, byte x, byte y) {
  if (type == tetra) {
    draw_text(x, y, tetra_sexed_price_text.pointer, tetra_sexed_price_text.length, 0)
  } else if (type == rasbora) {
    draw_text(x, y, rasbora_sexed_price_text.pointer, rasbora_sexed_price_text.length, 0)
  } else if (type == cory) {
    draw_text(x, y, cory_sexed_price_text.pointer, cory_sexed_price_text.length, 0)
  }
}

inline void render_fish_type(FishType type, byte x, byte y, byte mask, bool pos_direction) {
  if (type == tetra) {
    render_tetra(x, y, mask, pos_direction)
  } else if (type == rasbora) {
    render_rasbora(x, y, mask, pos_direction)
  } else if (type == cory) {
    render_cory(x, y, mask, pos_direction)
  } else if (type == betta) {
    render_betta(x, y, mask, pos_direction)
  }
}

void check_gameover() {
  if (should_gameover()) {
    init_gameover()
  }
}

bool should_gameover() {
  byte i

  for i,0,until,MAX_FISH_COUNT {
    if (fish_active[i] && fish_alive[i]) {
      return false
    }
  }

  // No fish
  if (fish_bucks >= CHEAPEST_FISH_PRICE) {
    // At least one fish can be purchased
    return false
  }

  return true
}