import random
import custom_random
import movement_lib
import math

import fish/tetra
import fish/rasbora

import tank/state
import entity/health

enum FishType {
  tetra,
  rasbora,
  cherry_shrimp
}


const byte MAX_FISH_COUNT = 20

array(byte) fish_x [MAX_FISH_COUNT]
array(byte) fish_y [MAX_FISH_COUNT]
array(signed16) fish_velocity_x [MAX_FISH_COUNT]
array(signed16) fish_velocity_y [MAX_FISH_COUNT]
array(FishType) fish_type [MAX_FISH_COUNT]
array(bool) fish_sex [MAX_FISH_COUNT]
array(bool) fish_alive [MAX_FISH_COUNT]

byte active_fish_count = 0

byte male_small_fish_count
byte female_small_fish_count

const word FISH_MAX_VELOCITY = $400
const byte FISH_DECAY_VELOCITY_PER_TICK = $2
const byte FISH_STRATA_VELOCITY_PER_TICK = $8

signed16 fish_diff_velocity_x
signed16 fish_diff_velocity_y

void init_fish() {
  byte i
  for i,0,until,MAX_FISH_COUNT {
    fish_alive[i] = false
  }

  spawn_fish(tetra, true, $80, $26)
  spawn_fish(rasbora, true, $60, $84)
  // // spawn_fish(cherry_shrimp, true)
  spawn_fish(tetra, false, $34, $B2)
  // spawn_fish(tetra, true, $80, $26)
  // spawn_fish(tetra, true, $81, $26)
  // spawn_fish(tetra, true, $80, $27)
  // spawn_fish(tetra, true, $81, $27)
}

void spawn_fish(FishType type, bool sex, byte x, byte y) {
  if (active_fish_count >= MAX_FISH_COUNT) {
    return
  }

  byte i
  for i,0,until,MAX_FISH_COUNT {
    if (not(fish_alive[i])) {
      // Spawn fish
      fish_x[i] = x
      fish_y[i] = y
      fish_velocity_x[i] = 0
      fish_velocity_y[i] = 0
      fish_type[i] = type
      fish_sex[i] = sex
      fish_alive[i] = true

      if (sex) {
        male_small_fish_count += 1
      } else {
        female_small_fish_count += 1
      }

      active_fish_count += 1

      return
    }
  }
}

void fish_tick() {
  fish_move()
  fish_breed()
}

inline void fish_move() {
  byte i
  byte random_direction
  byte x
  byte y
  word velocity_x
  word velocity_y
  bool did_change

  for i,0,until,MAX_FISH_COUNT {
    if (not(fish_alive[i])) {
      continue
    }

    if (fish_type[i] == tetra || fish_type[i] == rasbora) {
      tetra_fish_move(i)
    } else if (fish_type[i] == cherry_shrimp) {
      // cherry_shrimp_move(i)
    }
  }
}

inline void tetra_fish_move(byte i) {
  fish_diff_velocity_x = fish_velocity_x[i]
  fish_diff_velocity_y = fish_velocity_y[i]

  boid_center_mass_step(i)

  boid_distance_step(i)

  // boid_average_velocity_step(i)

  trend_center(i)

  bound_position(i)

  if (fish_diff_velocity_x < -FISH_MAX_VELOCITY) {
    fish_diff_velocity_x = -FISH_MAX_VELOCITY
  } else if (fish_diff_velocity_x > FISH_MAX_VELOCITY) {
    fish_diff_velocity_x = FISH_MAX_VELOCITY
  }

  if (fish_diff_velocity_y < -FISH_MAX_VELOCITY) {
    fish_diff_velocity_y = -FISH_MAX_VELOCITY
  } else if (fish_diff_velocity_y > FISH_MAX_VELOCITY) {
    fish_diff_velocity_y = FISH_MAX_VELOCITY
  }

  byte x
  byte y

  x = fish_x[i] + sbyte(fish_diff_velocity_x.hi)
  y = fish_y[i] + sbyte(fish_diff_velocity_y.hi)

  cap_fish_location_to_active_tank(x, y)

  fish_x[i] = x
  fish_y[i] = y

  // Only decay over certain speed to prevent flashing directions
  if (fish_diff_velocity_x < 0 && fish_diff_velocity_x > -$100) {
    fish_diff_velocity_x += FISH_DECAY_VELOCITY_PER_TICK
  } else if (fish_diff_velocity_x > 0 && fish_diff_velocity_x < $100) {
    fish_diff_velocity_x -= FISH_DECAY_VELOCITY_PER_TICK
  }

  if (fish_diff_velocity_y < 0) {
    fish_diff_velocity_y += FISH_DECAY_VELOCITY_PER_TICK
  } else if (fish_diff_velocity_y > 0) {
    fish_diff_velocity_y -= FISH_DECAY_VELOCITY_PER_TICK
  }

  fish_velocity_x[i] = fish_diff_velocity_x
  fish_velocity_y[i] = fish_diff_velocity_y
}

inline void boid_center_mass_step(byte i) {
  word center
  center = perceived_boid_center(i)

  signed16 stemp

  stemp = signed16(center.hi) - signed16(fish_x[i])
  signed16_arithmetic_shift_right(stemp)
  signed16_arithmetic_shift_right(stemp)
  fish_diff_velocity_x += stemp

  stemp = signed16(center.lo) - signed16(fish_y[i])
  signed16_arithmetic_shift_right(stemp)
  signed16_arithmetic_shift_right(stemp)
  fish_diff_velocity_y += stemp
}

macro void fish_fast_distance_square(sbyte input, byte output) {
  // sqrt(255) = 15
  if (input < 0) {
    // Square will not fit within byte
    if (input < -15) {
      output = $FF
    } else {
      output = $FF - input + 1
      output = input * input
    }
  } else if (input > 15) {
    output = $FF
  } else {
    output = input * input
  }
}

inline void boid_distance_step(byte i) {
  byte j
  byte x_squared
  byte y_squared
  word temp
  signed16 displacement_x
  signed16 displacement_y
  sbyte x_distance
  sbyte y_distance

  displacement_x = 0
  displacement_y = 0

  for j,0,until,MAX_FISH_COUNT {
    if (i != j && fish_alive[j]) {
      // Naive fast distance
      x_distance = sbyte(fish_x[j] - fish_x[i])
      y_distance = sbyte(fish_y[j] - fish_y[i])

      fish_fast_distance_square(x_distance, x_squared)
      fish_fast_distance_square(y_distance, y_squared)
      temp = word(x_squared) + word(y_squared)

      if (temp < 50) {
        displacement_x -= x_distance
        displacement_y -= y_distance
      }
    }
  }

  if (displacement_x != 0) {
    fish_diff_velocity_x += $80 >> lo(displacement_x >> 4)
  }

  if (displacement_y != 0) {
    fish_diff_velocity_y += $80 >> lo(displacement_y >> 4)
  }
}

inline void boid_average_velocity_step(byte i) {
  byte j
  signed16 sum_x
  signed16 sum_y
  byte count

  for j,0,until,MAX_FISH_COUNT {
    if (i != j && fish_alive[j]) {
      sum_x += fish_velocity_x[j]
      sum_y += fish_velocity_y[j]
      count += 1
    }
  }

  signed16_division(sum_x, count, sum_x)
  signed16_division(sum_y, count, sum_y)

  signed16 temp
  temp = sum_x - fish_velocity_x[i]
  fish_diff_velocity_x += temp.hi

  temp = sum_y - fish_velocity_y[i]
  fish_diff_velocity_y += temp.lo
}

inline word perceived_boid_center(byte i) {
  byte j
  word sum_x
  word sum_y
  byte count

  sum_x = 0
  sum_y = 0
  count = 0

  for j,0,until,MAX_FISH_COUNT {
    if (fish_alive[j]) {
      sum_x += fish_x[j]
      sum_y += fish_y[j]
      count += 1
    }
  }

  sum_x = sum_x / count
  sum_y = sum_y / count

  word output
  // Output must fit in single byte, as avg of x will always be < 256
  output.hi = sum_x.lo
  output.lo = sum_y.lo

  #if(debug)
  oam_buffer[oam_index] = sum_y.lo
  oam_buffer[oam_index + 1] = $1
  oam_buffer[oam_index + 2] = 0
  oam_buffer[oam_index + 3] = sum_x.lo
  oam_index += 4
  #endif


  return output
}

inline void trend_center(byte i) {
  if (fish_y[i] > $70) {
    fish_diff_velocity_y -= FISH_STRATA_VELOCITY_PER_TICK
  } else if (fish_y[i] < $90) {
    fish_diff_velocity_y += FISH_STRATA_VELOCITY_PER_TICK
  }
}

inline void bound_position(byte i) {
  byte temp
  temp = active_tank.x_low + 16 - fish[x]

  if (fish_x[i] < active_tank.x_low + 8) {
    fish_diff_velocity_x += $40
  } else if (fish_x[i] > active_tank.x_high - 8) {
    fish_diff_velocity_x -= $40
  }

  if (fish_y[i] < active_tank.y_low + 8) {
    fish_diff_velocity_y += $40
  } else if (fish_y[i] > active_tank.y_high - 8) {
    fish_diff_velocity_y -= $40
  }
}

// inline void cherry_shrimp_move(byte i) {
//   byte x
//   byte y
//   word velocity_x
//   word velocity_y
//   bool did_change

//   did_change = false

//   x = fish_x[i]
//   y = fish_y[i]
//   velocity_x = fish_velocity_x[i]
//   velocity_y = fish_velocity_y[i]

//   if (rand() < 8) {
//     // Small chance to swim upwards
//     velocity_y -= $400
//   }

//   if (velocity_y.hi > $7f) {
//     velocity_y += $80
//   }

//   x += sbyte(velocity_x.hi)
//   y += sbyte(velocity_y.hi)

//   cap_fish_location_to_active_tank(x, y, did_change)

//   fish_x[i] = x
//   fish_y[i] = y

//   fish_velocity_x[i] = velocity_x
//   fish_velocity_y[i] = velocity_y
// }

inline void fish_breed() {
  byte temp
  if (male_small_fish_count < 1 || female_small_fish_count < 1) {
    // Breeding cannot occur
    return
  }

  random_int_const(0, MAX_FISH_COUNT, temp)

  if (temp < (male_small_fish_count + female_small_fish_count) / 2 && rand() < 1) {
    // Breed
    random_int_const(0, 1, temp)
    spawn_fish(tetra, temp == 1, $80, $20)
  }
}

inline void fish_breathe() {
  // TODO: Base on fish size
  byte i

  for i,0,until,MAX_FISH_COUNT {
    if (fish_alive[i] && rand() < $40) {
      increase_ammonia(1)
    }
  }
}

inline void render_fish() {
  byte i
  byte mask
  bool pos_direction
  for i,0,until,MAX_FISH_COUNT {
    if (not(fish_alive[i])) {
      continue
    }

    pos_direction = fish_velocity_x[i].hi & $80 == 0
    if (pos_direction) {
      mask = 0
    } else {
      mask = %01000000
    }

    render_fish_type(fish_type[i], fish_x[i], fish_y[i], mask, pos_direction)
  }
}
