import random
import custom_random
import math

import fish/movement
import fish/tetra
import fish/rasbora

import tank/state
import entity/health
import entity/time

enum FishType {
  tetra,
  rasbora,
  cherry_shrimp,
  cory,
  betta
}

enum FishQuality {
  poor,
  fair,
  average,
  good,
  excellent
}

const byte MAX_FISH_COUNT = 20

array(byte) fish_x [MAX_FISH_COUNT]
array(byte) fish_y [MAX_FISH_COUNT]
array(byte) fish_velocity_x [MAX_FISH_COUNT]
array(byte) fish_velocity_y [MAX_FISH_COUNT]
array(FishType) fish_type [MAX_FISH_COUNT]
array(bool) fish_sex [MAX_FISH_COUNT]
array(bool) fish_active [MAX_FISH_COUNT]
array(bool) fish_alive [MAX_FISH_COUNT]
array(byte) fish_owned_age [MAX_FISH_COUNT]
array(word) fish_owned_date [MAX_FISH_COUNT]
array(word) fish_death_date [MAX_FISH_COUNT]
array(byte) fish_hunger [MAX_FISH_COUNT]

// Fish stats
/**
* True if bred, false if purchased
*/
array(bool) fish_source [MAX_FISH_COUNT]
array(byte) fish_health [MAX_FISH_COUNT]
array(FishQuality) fish_quality [MAX_FISH_COUNT]

const byte FISH_MAX_VELOCITY = $30
const byte FISH_MAX_DEAD_VELOCITY = $30
const byte FISH_DECAY_VELOCITY_PER_TICK = $2
const byte FISH_STRATA_VELOCITY_PER_TICK = $2
const byte FISH_RAND_VELOCITY = $10

byte fish_diff_velocity_x
byte fish_diff_velocity_y

void init_fish() {
  byte i
  for i,0,until,MAX_FISH_COUNT {
    fish_active[i] = false
  }

  spawn_fish(tetra, true, $80, $26, false)
  spawn_fish(rasbora, true, $60, $84, true)
  // // spawn_fish(cherry_shrimp, true)
  // spawn_fish(tetra, false, $34, $B2)
  // spawn_fish(tetra, true, $80, $26)
  // spawn_fish(tetra, true, $81, $26)
  // spawn_fish(tetra, true, $80, $27)
  // spawn_fish(tetra, true, $81, $27)
}

void spawn_fish(FishType type, bool sex, byte x, byte y, bool bred) {
  byte i
  byte temp
  for i,0,until,MAX_FISH_COUNT {
    if (not(fish_active[i])) {
      // Spawn fish
      fish_x[i] = x
      fish_y[i] = y
      fish_velocity_x[i] = 0
      fish_velocity_y[i] = 0
      fish_type[i] = type
      fish_sex[i] = sex
      fish_active[i] = true
      fish_alive[i] = true
      fish_source[i] = bred
      fish_owned_date[i] = elapsed_day

      if (bred) {
        // Newly born fish are very healthy
        fish_health[i] = $F0

        // Age is 0
        fish_owned_age[i] = 0

        // Quality spans the full range, except poor
        random_int_const(1, 5, temp)
        fish_quality[i] = FishQuality(temp)
      } else {
        // Fish start out more healthy than not when purchased, but still not great
        fish_health[i] = $B0

        // Purchased fish has random age
        random_int_const(25, 255, fish_owned_age[i])

        // Quality cannot be vibrant, and can be poor
        random_int_const(0, 4, temp)
        fish_quality[i] = FishQuality(temp)
      }

      // Randomize starting hunger
      random_int_const(10, 200, fish_hunger[i])

      return
    }
  }
}

void delete_fish(byte i) {
  fish_active[i] = false
  check_gameover()
}

bool has_alive_fish() {
  byte i
  for i,0,until,MAX_FISH_COUNT {
    if (fish_active[i] && fish_alive[i]) {
      return true
    }
  }

  return false
}

void fish_tick() {
  fish_move()
}

inline void fish_breed() {
  fish_breed_type(tetra)
  fish_breed_type(rasbora)
  fish_breed_type(cherry_shrimp)
  fish_breed_type(cory)
}

void fish_breed_type(FishType type) {
  byte i
  byte temp
  byte male_count
  byte female_count

  male_count = 0
  female_count = 0

  for i,0,until,MAX_FISH_COUNT {
    if (fish_active[i] && fish_alive[i] && fish_type[i] == type) {
      if (fish_sex[i]) {
        male_count += 1
      } else {
        female_count += 1
      }
    }
  }

  if (male_count != 0 && female_count != 0 && rand() < male_count + female_count) {
    // Breed
    random_int_const(0, 1, temp)
    spawn_fish(type, temp == 1, $80, $20, true)
  }
}

inline void fish_feed() {
  byte i
  // Fish food has the minor price of $2
  if (purchase(2)) {
    check_gameover()
    for i,0,until,MAX_FISH_COUNT {
      if (fish_active[i] && fish_alive[i]) {
        if (fish_hunger[i] > $40) {
          fish_hunger[i] -= $40
        } else {
          fish_hunger[i] = 0
        }
      }
    }

    // Feeding also adds ammonia
    increase_ammonia(25)
  } else {
    // TODO: Play denial sound effect
  }
}

inline void fish_breathe() {
  // TODO: Base on fish size
  byte i

  for i,0,until,MAX_FISH_COUNT {
    if (fish_active[i] && fish_alive[i]) {
      // Take breath
      increase_ammonia(1)
      fish_hunger[i] += 1

      // Update health
      if (ammonia_level > $10 && rand() < ammonia_level - $10) {
        // Decrease health
        decrease_fish_health(i, 4)
      } else if (ammonia_level < $10 && fish_hunger[i] < $20) {
        increase_fish_health(i, 1)
      }

      if (fish_hunger[i] > $FD) {
        // Instantly die
        kill_fish(i)
      } else if (fish_hunger[i] > $C8) {
        // Start taking damage from hunger
        decrease_fish_health(i, 2)
      }
    }
  }
}

void increase_fish_health(byte i, byte amount) {
  if (fish_health[i] > $FF - amount) {
    fish_health[i] = $FF
  } else {
    fish_health[i] += amount
  }
}

void decrease_fish_health(byte i, byte damage) {
  if (fish_health[i] < damage + 1) {
    kill_fish(i)
  } else {
    fish_health[i] -= damage
  }
}

void kill_fish(byte i) {
  fish_alive[i] = false
  fish_velocity_y[i] = 0
  fish_health[i] = 0
  fish_death_date[i] = elapsed_day

  check_gameover()
}

inline void render_fish() {
  byte i
  byte mask
  bool pos_direction
  for i,0,until,MAX_FISH_COUNT {
    if (not(fish_active[i])) {
      continue
    }

    pos_direction = fish_velocity_x[i] & $80 == 0
    if (pos_direction) {
      mask = 0
    } else {
      mask = %01000000
    }

    if (not(fish_alive[i])) {
      mask |= $80
    }

    render_fish_type(fish_type[i], fish_x[i], fish_y[i], mask, pos_direction)
  }
}
