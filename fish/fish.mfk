import random
import custom_random
import math

import fish/movement
import fish/tetra
import fish/rasbora

import tank/state
import entity/health

enum FishType {
  tetra,
  rasbora,
  cherry_shrimp,
  cory,
  betta
}


const byte MAX_FISH_COUNT = 20

array(byte) fish_x [MAX_FISH_COUNT]
array(byte) fish_y [MAX_FISH_COUNT]
array(byte) fish_velocity_x [MAX_FISH_COUNT]
array(byte) fish_velocity_y [MAX_FISH_COUNT]
array(FishType) fish_type [MAX_FISH_COUNT]
array(bool) fish_sex [MAX_FISH_COUNT]
array(bool) fish_active [MAX_FISH_COUNT]
array(bool) fish_alive [MAX_FISH_COUNT]

// Fish stats
/**
* True if bred, false if purchased
*/
array(bool) fish_source [MAX_FISH_COUNT]
array(byte) fish_health [MAX_FISH_COUNT]

byte active_fish_count = 0

byte male_small_fish_count
byte female_small_fish_count

const byte FISH_MAX_VELOCITY = $30
const byte FISH_MAX_DEAD_VELOCITY = $30
const byte FISH_DECAY_VELOCITY_PER_TICK = $2
const byte FISH_STRATA_VELOCITY_PER_TICK = $8

byte fish_diff_velocity_x
byte fish_diff_velocity_y

void init_fish() {
  byte i
  for i,0,until,MAX_FISH_COUNT {
    fish_active[i] = false
  }

  spawn_fish(tetra, true, $80, $26, false)
  // spawn_fish(rasbora, true, $60, $84)
  // // spawn_fish(cherry_shrimp, true)
  // spawn_fish(tetra, false, $34, $B2)
  // spawn_fish(tetra, true, $80, $26)
  // spawn_fish(tetra, true, $81, $26)
  // spawn_fish(tetra, true, $80, $27)
  // spawn_fish(tetra, true, $81, $27)
}

void spawn_fish(FishType type, bool sex, byte x, byte y, bool bred) {
  if (active_fish_count >= MAX_FISH_COUNT) {
    return
  }

  byte i
  for i,0,until,MAX_FISH_COUNT {
    if (not(fish_active[i])) {
      // Spawn fish
      fish_x[i] = x
      fish_y[i] = y
      fish_velocity_x[i] = 0
      fish_velocity_y[i] = 0
      fish_type[i] = type
      fish_sex[i] = sex
      fish_active[i] = true
      fish_alive[i] = true
      fish_source[i] = bred
      // Fish start out more 

      if (bred) {
        // Newly born fish are very healthy
        fish_health[i] = $F0
      } else {
        // Fish start out more healthy than not when purchased, but still not great
        fish_health[i] = $B0
      }

      if (sex) {
        male_small_fish_count += 1
      } else {
        female_small_fish_count += 1
      }

      active_fish_count += 1

      return
    }
  }
}

void delete_fish(byte i) {
  fish_active[i] = false
}

bool has_alive_fish() {
  byte i
  for i,0,until,MAX_FISH_COUNT {
    if (fish_active[i] && fish_alive[i]) {
      return true
    }
  }

  return false
}

void fish_tick() {
  fish_move()
  // fish_breed()
}

inline void fish_breed() {
  byte temp
  if (male_small_fish_count < 1 || female_small_fish_count < 1) {
    // Breeding cannot occur
    return
  }

  random_int_const(0, MAX_FISH_COUNT, temp)

  if (temp < (male_small_fish_count + female_small_fish_count) / 2 && rand() < 1) {
    // Breed
    random_int_const(0, 1, temp)
    spawn_fish(tetra, temp == 1, $80, $20, true)
  }
}

inline void fish_breathe() {
  // TODO: Base on fish size
  byte i

  for i,0,until,MAX_FISH_COUNT {
    if (fish_alive[i]) {
      // Take breath
      increase_ammonia(1)

      // Update health
      if (ammonia_level > $10 && rand() < ammonia_level - $10) {
        // Decrease health
        if (fish_health[i] < 5) {
          fish_alive[i] = false
          fish_velocity_y[i] = 0
          fish_health[i] = 0
        } else {
          fish_health[i] -= 4
        }
      }
    }
  }
}

inline void render_fish() {
  byte i
  byte mask
  bool pos_direction
  for i,0,until,MAX_FISH_COUNT {
    if (not(fish_active[i])) {
      continue
    }

    pos_direction = fish_velocity_x[i] & $80 == 0
    if (pos_direction) {
      mask = 0
    } else {
      mask = %01000000
    }

    if (not(fish_alive[i])) {
      mask |= $80
    }

    render_fish_type(fish_type[i], fish_x[i], fish_y[i], mask, pos_direction)
  }
}
