import movement_lib

import fish/fish

inline void fish_move() {
  byte i
  byte random_direction
  byte x
  byte y
  word velocity_x
  word velocity_y
  bool did_change

  for i,0,until,MAX_FISH_COUNT {
    if (not(fish_active[i])) {
      continue
    }

    if (not(fish_alive[i])) {
      dead_fish_move(i)
      continue
    }

    tetra_fish_move(i, fish_strata[fish_type[i]])
  }
}

inline void dead_fish_move(byte i) {
  byte vel_x
  byte vel_y

  if (fish_y[i] > active_tank.y_low + 20) {
    fish_velocity_y[i] -= 8
  }
   else if (fish_y[i] > active_tank.y_low + 10) {
    fish_velocity_y[i] -= 4
  } else if (fish_y[i] > active_tank.y_low + 5) {
    fish_velocity_y[i] -= 2
  } else if (fish_y[i] > active_tank.y_low) {
    fish_velocity_y[i] -= 4
  } 
  else if (fish_y[i] == active_tank.y_low) {
    fish_velocity_y[i] += 8
  }

  if (fish_velocity_y[i] & $80 != 0) {
    if (fish_velocity_y[i] < -FISH_MAX_DEAD_VELOCITY) {
      fish_velocity_y[i] = -FISH_MAX_DEAD_VELOCITY
    }
  } else if (fish_velocity_y[i] > FISH_MAX_DEAD_VELOCITY) {
    fish_velocity_y[i] = FISH_MAX_DEAD_VELOCITY
  }

  vel_x = 0
  vel_y = fish_velocity_y[i]

  apply_fish_velocity(i, vel_x, vel_y, true)
}

inline void tetra_fish_move(byte i, FishStrata strata) {
  fish_diff_velocity_x = fish_velocity_x[i]
  fish_diff_velocity_y = fish_velocity_y[i]

  boid_center_mass_step(i, strata)

  // boid_distance_step(i)

  // boid_average_velocity_step(i)

  if (strata == top_strata) {
    trend_strata(i, $40, $60)
  } else if (strata == middle_strata) {
    trend_strata(i, $70, $90)
  } else {
    trend_strata(i, $B8, $D0)
  }

  boid_apply_random(i)

  if (current_screen == aquarium) {
    bound_position(i)
  }

  if (fish_diff_velocity_x & $80 != 0) {
    // Check to prevent flowing into neg/pos
    if (fish_diff_velocity_x < -FISH_MAX_BREAK_VELOCITY) {
      fish_diff_velocity_x = -FISH_MAX_BREAK_VELOCITY
    } else if (fish_diff_velocity_x < -FISH_MAX_VELOCITY) {
      fish_diff_velocity_x += $1
    }
  } else if (fish_diff_velocity_x > FISH_MAX_BREAK_VELOCITY) {
    fish_diff_velocity_x = FISH_MAX_BREAK_VELOCITY
  } else if (fish_diff_velocity_x > FISH_MAX_VELOCITY) {
    fish_diff_velocity_x -= $1
  }

  if (fish_diff_velocity_y & $80 != 0) {
    if (fish_diff_velocity_y < -FISH_MAX_BREAK_VELOCITY) {
      fish_diff_velocity_y = -FISH_MAX_BREAK_VELOCITY
    } else if (fish_diff_velocity_y < -FISH_MAX_VELOCITY) {
      fish_diff_velocity_y += $1
    }
  } else if (fish_diff_velocity_y > FISH_MAX_BREAK_VELOCITY) {
    fish_diff_velocity_y = FISH_MAX_BREAK_VELOCITY
  } else if (fish_diff_velocity_y > FISH_MAX_VELOCITY) {
    fish_diff_velocity_y -= $1
  }

  fish_velocity_x[i] = fish_diff_velocity_x
  fish_velocity_y[i] = fish_diff_velocity_y

  apply_fish_velocity(i, fish_diff_velocity_x, fish_diff_velocity_y, true)

  // Only decay over certain speed to prevent flashing directions
  // if (fish_diff_velocity_x & $80 != 0) {
  //   if (fish_diff_velocity_x < -$10) {
  //     fish_diff_velocity_x += FISH_DECAY_VELOCITY_PER_TICK
  //   }
  // } else if (fish_diff_velocity_x > $10) {
  //   fish_diff_velocity_x -= FISH_DECAY_VELOCITY_PER_TICK
  // }

  // if (fish_diff_velocity_y & $80 != 0) {
  //   if (fish_diff_velocity_y < -$10) {
  //     fish_diff_velocity_y += FISH_DECAY_VELOCITY_PER_TICK
  //   }
  // } else if (fish_diff_velocity_y > $10) {
  //   fish_diff_velocity_y -= FISH_DECAY_VELOCITY_PER_TICK
  // }
}

macro void apply_fish_velocity(byte i, byte vel_x, byte vel_y, bool const cap_location) {
  // Take upper 4 bits for vel
  arithmetic_shift_right(vel_x)
  arithmetic_shift_right(vel_x)
  arithmetic_shift_right(vel_x)
  arithmetic_shift_right(vel_x)
  arithmetic_shift_right(vel_x)

  vel_x += fish_x[i]

  // Take upper 4 bits for vel
  arithmetic_shift_right(vel_y)
  arithmetic_shift_right(vel_y)
  arithmetic_shift_right(vel_y)
  arithmetic_shift_right(vel_y)
  arithmetic_shift_right(vel_y)
  vel_y += fish_y[i]

  if (current_screen == aquarium && cap_location) {
    cap_fish_location_to_active_tank(vel_x, vel_y)
  }

  fish_x[i] = vel_x
  fish_y[i] = vel_y
}

inline void boid_center_mass_step(byte i, FishStrata strata) {
  word center
  center = perceived_boid_center(i, strata)

  word stemp
  byte temp

  stemp = word(center.hi) - word(fish_x[i])
  signed16_arithmetic_shift_right(stemp)
  temp = stemp.lo
  arithmetic_shift_right(temp)
  arithmetic_shift_right(temp)
  arithmetic_shift_right(temp)
  arithmetic_shift_right(temp)
  arithmetic_shift_right(temp)
  fish_diff_velocity_x += temp

  stemp = word(center.lo) - word(fish_y[i])
  signed16_arithmetic_shift_right(stemp)
  temp = stemp.lo
  arithmetic_shift_right(temp)
  arithmetic_shift_right(temp)
  arithmetic_shift_right(temp)
  arithmetic_shift_right(temp)
  arithmetic_shift_right(temp)
  fish_diff_velocity_y += temp
}

inline void boid_apply_random(byte i) {
  byte temp
  if (rand() < $10) {
    random_int_const(0, 2, temp)
    if (rand() < $30) {
      // Move vertically
      if (temp == 0) {
        fish_diff_velocity_y += FISH_RAND_VELOCITY
      } else {
        fish_diff_velocity_y -= FISH_RAND_VELOCITY
      }
    } else {
      if (temp == 0) {
        fish_diff_velocity_x += FISH_RAND_VELOCITY
      } else {
        fish_diff_velocity_x -= FISH_RAND_VELOCITY
      }
    }
  }
}

macro void fish_fast_distance_square(byte input, byte output) {
  // sqrt(255) = 15
  if (input & $80 != 0) {
    // Square will not fit within byte
    if (input < -15) {
      output = $FF
    } else {
      output = -byte(input)
      output = output * output
    }
  } else if (input > 15) {
    output = $FF
  } else {
    output = input * input
  }
}

inline void boid_distance_step(byte i) {
  byte j
  byte x_squared
  byte y_squared
  word temp
  word displacement_x
  word displacement_y
  byte x_distance
  byte y_distance

  displacement_x = 0
  displacement_y = 0

  for j,0,until,MAX_FISH_COUNT {
    if (i != j && fish_active[j]) {
      // Naive fast distance
      x_distance = fish_x[j] - fish_x[i]
      y_distance = fish_y[j] - fish_y[i]

      fish_fast_distance_square(x_distance, x_squared)
      fish_fast_distance_square(y_distance, y_squared)
      temp = word(x_squared) + word(y_squared)

      if (temp < $B0) {
        arithmetic_shift_right(x_distance)
        fish_diff_velocity_x -= x_distance
        arithmetic_shift_right(y_distance)
        fish_diff_velocity_y -= y_distance
        // displacement_x -= x_distance
        // displacement_y -= y_distance
      }
    }
  }

  // if (displacement_x != 0) {
    // signed16_arithmetic_shift_right(displacement_x)
    // fish_diff_velocity_x += displacement_x.lo
  // }

  // if (displacement_y != 0) {
    // signed16_arithmetic_shift_right(displacement_y)
    // fish_diff_velocity_y += displacement_y.lo
  // }
}

inline void boid_average_velocity_step(byte i) {
  byte j
  word sum_x
  word sum_y
  byte count

  for j,0,until,MAX_FISH_COUNT {
    if (i != j && fish_active[j]) {
      sum_x += fish_velocity_x[j]
      sum_y += fish_velocity_y[j]
      count += 1
    }
  }

  signed16_division(sum_x, count, sum_x)
  signed16_division(sum_y, count, sum_y)

  word temp
  temp = sum_x - fish_velocity_x[i]
  fish_diff_velocity_x += temp.hi

  temp = sum_y - fish_velocity_y[i]
  fish_diff_velocity_y += temp.lo
}

inline word perceived_boid_center(byte i, FishStrata strata) {
  byte j
  word sum_x
  word sum_y
  byte count

  sum_x = 0
  sum_y = 0
  count = 0

  for j,0,until,MAX_FISH_COUNT {
    if (i != j && fish_active[j] && fish_alive[j] && fish_strata[fish_type[j]] == strata) {
      sum_x += fish_x[j]
      sum_y += fish_y[j]
      count += 1
    }
  }

  sum_x = sum_x / count
  sum_y = sum_y / count

  word output
  // Output must fit in single byte, as avg of x will always be < 256
  output.hi = sum_x.lo
  output.lo = sum_y.lo

  #if(debug)
  oam_buffer[oam_index] = sum_y.lo
  oam_buffer[oam_index + 1] = $80
  oam_buffer[oam_index + 2] = 0
  oam_buffer[oam_index + 3] = sum_x.lo
  oam_index += 4
  #endif

  return output
}

macro void trend_strata(byte i, byte const top_pos, byte const bottom_pos) {
  if (fish_y[i] > bottom_pos) {
    fish_diff_velocity_y -= FISH_STRATA_VELOCITY_PER_TICK
  } else if (fish_y[i] < top_pos) {
    fish_diff_velocity_y += FISH_STRATA_VELOCITY_PER_TICK
  }
}

inline void bound_position(byte i) {
  if (fish_x[i] < active_tank.x_low + 8) {
    fish_diff_velocity_x += $4
  } else if (fish_x[i] > active_tank.x_high - 8) {
    fish_diff_velocity_x -= $4
  }

  if (fish_y[i] < active_tank.y_low + 8) {
    fish_diff_velocity_y += $4
  } else if (fish_y[i] > active_tank.y_high - 8) {
    fish_diff_velocity_y -= $4
  }
}

// inline void cherry_shrimp_move(byte i) {
//   byte x
//   byte y
//   word velocity_x
//   word velocity_y
//   bool did_change

//   did_change = false

//   x = fish_x[i]
//   y = fish_y[i]
//   velocity_x = fish_velocity_x[i]
//   velocity_y = fish_velocity_y[i]

//   if (rand() < 8) {
//     // Small chance to swim upwards
//     velocity_y -= $400
//   }

//   if (velocity_y.hi > $7f) {
//     velocity_y += $80
//   }

//   x += sbyte(velocity_x.hi)
//   y += sbyte(velocity_y.hi)

//   cap_fish_location_to_active_tank(x, y, did_change)

//   fish_x[i] = x
//   fish_y[i] = y

//   fish_velocity_x[i] = velocity_x
//   fish_velocity_y[i] = velocity_y
// }
